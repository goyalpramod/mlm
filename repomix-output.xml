This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: todo_checklist.md, ml_math_book_spec.md
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.eslintrc.json
.gitignore
app/globals.css
app/layout.tsx
app/linear-algebra/page.tsx
app/matrices/page.tsx
app/not-found.tsx
app/optimization/page.tsx
app/page.tsx
app/probability/page.tsx
app/statistics/page.tsx
components/content/HomePageContent.tsx
components/content/MathErrorBoundary.tsx
components/content/MDXComponents.tsx
components/content/MDXContent.tsx
components/layout/ChapterLayout.tsx
components/layout/ChapterNavigation.tsx
components/layout/ClientLayout.tsx
components/layout/Footer.tsx
components/layout/Header.tsx
components/layout/Layout.tsx
components/math/KaTeX.tsx
components/navigation/TableOfContents.tsx
components/navigation/ToCItem.tsx
components/navigation/ToCPanel.tsx
components/navigation/ToCToggle.tsx
components/providers/ThemeProvider.tsx
components/ui/Container.tsx
components/ui/ThemeToggle.tsx
components/visualizations/GradientDescentVisualization.tsx
components/visualizations/MatrixTransformation.tsx
components/visualizations/SVDVisualization.tsx
content/linear-algebra/index.mdx
content/matrices/index.mdx
content/optimization/index.mdx
content/probability/index.mdx
content/statistics/index.mdx
lib/data/chapters.ts
lib/hooks/useSectionObserver.ts
lib/hooks/useTheme.ts
lib/navigation/tocGenerator.ts
lib/utils/cn.ts
lib/utils/contentLoader.ts
lib/utils/headingExtractor.ts
lib/utils/loadMDX.ts
lib/utils/navigation.ts
lib/utils/scrollUtils.ts
lib/utils/typography.ts
LICENSE
mdx-components.tsx
next-env.d.ts
next.config.mjs
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json
types/content.ts
types/frontmatter.ts
types/navigation.ts
types/theme.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/navigation/TableOfContents.tsx">
// components/navigation/TableOfContents.tsx
'use client'

import { useState, useEffect } from 'react'
import { ToCToggle } from './ToCToggle'
import { ToCPanel } from './ToCPanel'
import { useSectionObserver } from '@/lib/hooks/useSectionObserver'
import { generatePageToC, updateToCActiveStates } from '@/lib/navigation/tocGenerator'
import { ToCItem } from '@/types/navigation'

interface TableOfContentsProps {
  className?: string
}

export function TableOfContents({ className }: TableOfContentsProps) {
  const [isExpanded, setIsExpanded] = useState(false)
  const [tocItems, setTocItems] = useState<ToCItem[]>([])
  const { activeSection } = useSectionObserver()
  
  // Generate ToC on mount and when content changes
  useEffect(() => {
    const generateToC = () => {
      const items = generatePageToC()
      setTocItems(items)
    }
    
    // Generate initial ToC
    generateToC()
    
    // Regenerate on navigation or content changes
    const handleNavigation = () => {
      setTimeout(generateToC, 100) // Small delay to ensure DOM is updated
    }
    
    window.addEventListener('popstate', handleNavigation)
    
    return () => {
      window.removeEventListener('popstate', handleNavigation)
    }
  }, [])
  
  // Update active states when active section changes
  const itemsWithActiveStates = updateToCActiveStates(tocItems, activeSection)
  
  const handleToggle = () => {
    setIsExpanded(!isExpanded)
  }
  
  const handleClose = () => {
    setIsExpanded(false)
  }
  
  // Don't render if no items
  if (itemsWithActiveStates.length === 0) {
    return null
  }
  
  return (
    <div className={className}>
      <ToCToggle
        isExpanded={isExpanded}
        onToggle={handleToggle}
      />
      
      <ToCPanel
        isExpanded={isExpanded}
        items={itemsWithActiveStates}
        onClose={handleClose}
      />
    </div>
  )
}
</file>

<file path="components/navigation/ToCItem.tsx">
// components/navigation/ToCItem.tsx
'use client'

import { motion } from 'framer-motion'
import { ToCItem as ToCItemType } from '@/types/navigation'
import { scrollToElement } from '@/lib/utils/scrollUtils'
import { cn } from '@/lib/utils/cn'

interface ToCItemProps {
  item: ToCItemType
  onItemClick?: (id: string) => void
}

export function ToCItem({ item, onItemClick }: ToCItemProps) {
  const handleClick = (e: React.MouseEvent) => {
    e.preventDefault()
    scrollToElement(item.id)
    onItemClick?.(item.id)
  }
  
  const indentLevel = Math.max(0, (item.level - 1) * 16) // 16px per level
  
  return (
    <motion.div
      initial={{ opacity: 0, x: -10 }}
      animate={{ opacity: 1, x: 0 }}
      className="toc-item"
    >
      <a
        href={`#${item.id}`}
        onClick={handleClick}
        className={cn(
          'block py-1 px-2 text-sm rounded transition-colors',
          'hover:bg-accent hover:text-foreground',
          'focus:outline-none focus:bg-accent',
          item.isActive
            ? 'bg-foreground text-background font-medium'
            : 'text-muted-foreground'
        )}
        style={{ paddingLeft: `${8 + indentLevel}px` }}
      >
        <span className="truncate block">{item.title}</span>
      </a>
      
      {item.children && item.children.length > 0 && (
        <div className="ml-2">
          {item.children.map((child) => (
            <ToCItem
              key={child.id}
              item={child}
              onItemClick={onItemClick}
            />
          ))}
        </div>
      )}
    </motion.div>
  )
}
</file>

<file path="components/navigation/ToCPanel.tsx">
// components/navigation/ToCPanel.tsx
'use client'

import { motion, AnimatePresence } from 'framer-motion'
import { ToCItem as ToCItemType } from '@/types/navigation'
import { ToCItem } from './ToCItem'
import { cn } from '@/lib/utils/cn'
import { useEffect } from 'react'

interface ToCPanelProps {
  isExpanded: boolean
  items: ToCItemType[]
  onClose: () => void
  onItemClick?: (id: string) => void
  className?: string
}

export function ToCPanel({ 
  isExpanded, 
  items, 
  onClose, 
  onItemClick,
  className 
}: ToCPanelProps) {
  // Handle escape key
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isExpanded) {
        onClose()
      }
    }
    
    document.addEventListener('keydown', handleEscape)
    return () => document.removeEventListener('keydown', handleEscape)
  }, [isExpanded, onClose])
  
  const handleItemClick = (id: string) => {
    onItemClick?.(id)
    onClose() // Close panel after navigation
  }
  
  return (
    <AnimatePresence>
      {isExpanded && (
        <>
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={onClose}
            className="fixed inset-0 bg-black/20 z-30"
          />
          
          {/* Panel */}
          <motion.div
            initial={{ opacity: 0, x: 300, scale: 0.95 }}
            animate={{ opacity: 1, x: 0, scale: 1 }}
            exit={{ opacity: 0, x: 300, scale: 0.95 }}
            transition={{ type: "spring", damping: 25, stiffness: 300 }}
            className={cn(
              'fixed top-16 right-4 bottom-4 w-80 z-40',
              'bg-background border border-border rounded-lg shadow-xl',
              'flex flex-col overflow-hidden',
              className
            )}
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-border">
              <h3 className="text-sm font-semibold text-foreground">
                Table of Contents
              </h3>
              <button
                onClick={onClose}
                className="p-1 rounded hover:bg-accent transition-colors"
                aria-label="Close table of contents"
                type="button"
              >
                <svg
                  className="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            </div>
            
            {/* Content */}
            <div className="flex-1 overflow-y-auto p-4">
              {items.length > 0 ? (
                <div className="space-y-1">
                  {items.map((item) => (
                    <ToCItem
                      key={item.id}
                      item={item}
                      onItemClick={handleItemClick}
                    />
                  ))}
                </div>
              ) : (
                <div className="text-sm text-muted-foreground text-center py-8">
                  No headings found
                </div>
              )}
            </div>
          </motion.div>
        </>
      )}
    </AnimatePresence>
  )
}
</file>

<file path="components/navigation/ToCToggle.tsx">
// components/navigation/ToCToggle.tsx
'use client'

import { motion, AnimatePresence } from 'framer-motion'
import { cn } from '@/lib/utils/cn'

interface ToCToggleProps {
  isExpanded: boolean
  onToggle: () => void
  className?: string
}

export function ToCToggle({ isExpanded, onToggle, className }: ToCToggleProps) {
  return (
    <AnimatePresence>
      {!isExpanded && (
        <motion.button
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          exit={{ opacity: 0, scale: 0.8 }}
          whileHover={{ scale: 1.05 }}
          whileTap={{ scale: 0.95 }}
          onClick={onToggle}
          className={cn(
            'fixed top-20 right-4 z-40',
            'p-3 rounded-lg shadow-lg',
            'bg-background border border-border',
            'hover:bg-accent transition-colors',
            'focus:outline-none focus:ring-2 focus:ring-foreground focus:ring-offset-2',
            className
          )}
          aria-label="Open table of contents"
          type="button"
        >
          <svg
            className="w-5 h-5 text-foreground"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M4 6h16M4 10h16M4 14h16M4 18h16"
            />
          </svg>
        </motion.button>
      )}
    </AnimatePresence>
  )
}
</file>

<file path="lib/hooks/useSectionObserver.ts">
// lib/hooks/useSectionObserver.ts
'use client'

import { useState, useEffect, useRef } from 'react'
import { useInView } from 'react-intersection-observer'

interface UseSectionObserverReturn {
  activeSection: string | null
  visibleSections: Set<string>
}

export function useSectionObserver(headingSelector = 'h1, h2, h3, h4, h5, h6'): UseSectionObserverReturn {
  const [activeSection, setActiveSection] = useState<string | null>(null)
  const [visibleSections, setVisibleSections] = useState<Set<string>>(new Set())
  const observerRef = useRef<IntersectionObserver | null>(null)
  const headingElements = useRef<Element[]>([])
  
  useEffect(() => {
    // Find all headings in the document
    const headings = Array.from(document.querySelectorAll(headingSelector))
    headingElements.current = headings
    
    if (headings.length === 0) return
    
    // Create intersection observer
    observerRef.current = new IntersectionObserver(
      (entries) => {
        const visible = new Set<string>()
        
        entries.forEach((entry) => {
          const id = entry.target.id
          if (!id) return
          
          if (entry.isIntersecting) {
            visible.add(id)
          }
        })
        
        setVisibleSections((prev) => {
          const newVisible = new Set(prev)
          
          entries.forEach((entry) => {
            const id = entry.target.id
            if (!id) return
            
            if (entry.isIntersecting) {
              newVisible.add(id)
            } else {
              newVisible.delete(id)
            }
          })
          
          return newVisible
        })
        
        // Determine the most relevant active section
        const currentVisible = Array.from(visible)
        if (currentVisible.length > 0) {
          // Use the first visible section as active
          setActiveSection(currentVisible[0])
        }
      },
      {
        rootMargin: '-80px 0px -80px 0px', // Account for fixed header
        threshold: [0, 0.25, 0.5, 0.75, 1]
      }
    )
    
    // Observe all headings
    headings.forEach((heading) => {
      if (observerRef.current) {
        observerRef.current.observe(heading)
      }
    })
    
    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect()
      }
    }
  }, [headingSelector])
  
  // Handle hash changes
  useEffect(() => {
    const handleHashChange = () => {
      const hash = window.location.hash.slice(1)
      if (hash && document.getElementById(hash)) {
        setActiveSection(hash)
      }
    }
    
    // Check initial hash
    handleHashChange()
    
    window.addEventListener('hashchange', handleHashChange)
    return () => window.removeEventListener('hashchange', handleHashChange)
  }, [])
  
  return {
    activeSection,
    visibleSections
  }
}
</file>

<file path="lib/navigation/tocGenerator.ts">
// lib/navigation/tocGenerator.ts
import { ToCItem } from '@/types/navigation'
import { extractHeadings, buildToCHierarchy } from '@/lib/utils/headingExtractor'

/**
 * Generate ToC from current page content
 */
export function generatePageToC(): ToCItem[] {
  if (typeof window === 'undefined') return []
  
  const contentContainer = document.querySelector('main') || document.body
  const headings = extractHeadings(contentContainer)
  
  return buildToCHierarchy(headings)
}

/**
 * Generate ToC from a specific container element
 */
export function generateToCFromContainer(container: Element): ToCItem[] {
  const headings = extractHeadings(container)
  return buildToCHierarchy(headings)
}

/**
 * Update ToC active states based on current active section
 */
export function updateToCActiveStates(
  tocItems: ToCItem[], 
  activeSection: string | null
): ToCItem[] {
  return tocItems.map((item) => ({
    ...item,
    isActive: item.id === activeSection,
    children: item.children ? updateToCActiveStates(item.children, activeSection) : undefined
  }))
}

/**
 * Find ToC item by ID
 */
export function findToCItem(items: ToCItem[], id: string): ToCItem | null {
  for (const item of items) {
    if (item.id === id) {
      return item
    }
    if (item.children) {
      const found = findToCItem(item.children, id)
      if (found) return found
    }
  }
  return null
}
</file>

<file path="lib/utils/headingExtractor.ts">
// lib/utils/headingExtractor.ts
import { ToCItem, HeadingElement } from '@/types/navigation'

/**
 * Generate URL-safe slug from heading text
 */
export function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // Remove special characters except hyphens
    .replace(/\s+/g, '-')     // Replace spaces with hyphens
    .replace(/--+/g, '-')     // Replace multiple hyphens with single
    .trim()
}

/**
 * Extract headings from DOM within a container
 */
export function extractHeadings(container: Element): HeadingElement[] {
  const headingSelector = 'h1, h2, h3, h4, h5, h6'
  const headingElements = container.querySelectorAll(headingSelector)
  
  return Array.from(headingElements).map((element) => {
    const level = parseInt(element.tagName.charAt(1))
    const title = element.textContent?.trim() || ''
    const existingId = element.id
    const slug = existingId || generateSlug(title)
    
    // Ensure element has an ID for navigation
    if (!element.id) {
      element.id = slug
    }
    
    return {
      id: slug,
      title,
      level,
      element
    }
  })
}

/**
 * Convert flat heading list to hierarchical ToC structure
 */
export function buildToCHierarchy(headings: HeadingElement[]): ToCItem[] {
  const toc: ToCItem[] = []
  const stack: ToCItem[] = []
  
  headings.forEach((heading) => {
    const item: ToCItem = {
      id: heading.id,
      title: heading.title,
      level: heading.level,
      slug: heading.id,
      children: []
    }
    
    // Find the correct parent level
    while (stack.length > 0 && stack[stack.length - 1].level >= item.level) {
      stack.pop()
    }
    
    if (stack.length === 0) {
      // Top level item
      toc.push(item)
    } else {
      // Child item
      const parent = stack[stack.length - 1]
      if (!parent.children) {
        parent.children = []
      }
      parent.children.push(item)
    }
    
    stack.push(item)
  })
  
  return toc
}

/**
 * Flatten hierarchical ToC for easier processing
 */
export function flattenToC(items: ToCItem[]): ToCItem[] {
  const flattened: ToCItem[] = []
  
  function traverse(items: ToCItem[]) {
    items.forEach((item) => {
      flattened.push(item)
      if (item.children && item.children.length > 0) {
        traverse(item.children)
      }
    })
  }
  
  traverse(items)
  return flattened
}
</file>

<file path="lib/utils/scrollUtils.ts">
// lib/utils/scrollUtils.ts
import { ScrollToOptions } from '@/types/navigation'

/**
 * Smooth scroll to element with offset for fixed headers
 */
export function scrollToElement(
  elementId: string, 
  options: ScrollToOptions = {}
): void {
  const { behavior = 'smooth', offset = 80 } = options
  
  const element = document.getElementById(elementId)
  if (!element) return
  
  const elementPosition = element.getBoundingClientRect().top
  const offsetPosition = elementPosition + window.pageYOffset - offset
  
  window.scrollTo({
    top: offsetPosition,
    behavior
  })
  
  // Update URL hash without triggering scroll
  if (window.history.replaceState) {
    window.history.replaceState(null, '', `#${elementId}`)
  }
}

/**
 * Get current scroll position
 */
export function getScrollPosition(): number {
  return window.pageYOffset || document.documentElement.scrollTop
}

/**
 * Check if element is in viewport
 */
export function isElementInViewport(element: Element): boolean {
  const rect = element.getBoundingClientRect()
  const windowHeight = window.innerHeight || document.documentElement.clientHeight
  
  return (
    rect.top >= 0 &&
    rect.left >= 0 &&
    rect.bottom <= windowHeight &&
    rect.right <= (window.innerWidth || document.documentElement.clientWidth)
  )
}

/**
 * Get the most visible heading element
 */
export function getMostVisibleHeading(headings: Element[]): Element | null {
  let mostVisible: Element | null = null
  let maxVisibleHeight = 0
  
  headings.forEach((heading) => {
    const rect = heading.getBoundingClientRect()
    const windowHeight = window.innerHeight
    
    // Calculate visible height of the element
    const visibleTop = Math.max(0, rect.top)
    const visibleBottom = Math.min(windowHeight, rect.bottom)
    const visibleHeight = Math.max(0, visibleBottom - visibleTop)
    
    if (visibleHeight > maxVisibleHeight) {
      maxVisibleHeight = visibleHeight
      mostVisible = heading
    }
  })
  
  return mostVisible
}
</file>

<file path="types/navigation.ts">
// types/navigation.ts
export interface ToCItem {
  id: string
  title: string
  level: number // 1-6 for h1-h6
  slug: string
  chapter?: string
  isActive?: boolean
  children?: ToCItem[]
}

export interface ToCState {
  isExpanded: boolean
  activeItem: string | null
  items: ToCItem[]
}

export interface HeadingElement {
  id: string
  title: string
  level: number
  element?: Element
}

export interface ScrollToOptions {
  behavior?: 'smooth' | 'instant'
  offset?: number
}
</file>

<file path=".eslintrc.json">
{
  "extends": [
    "next/core-web-vitals",
    "next/typescript"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "warn",
    "prefer-const": "error",
    "react-hooks/exhaustive-deps": "warn"
  }
}
</file>

<file path="app/not-found.tsx">
import Link from 'next/link'

export default function NotFound() {
  return (
    <div className="container mx-auto px-4 py-16">
      <div className="max-w-2xl mx-auto text-center">
        <h1 className="text-6xl font-bold mb-4">404</h1>
        <h2 className="text-2xl font-semibold mb-6">Page Not Found</h2>
        <p className="text-muted-foreground mb-8">
          The mathematical concept you're looking for doesn't exist in our current dimension.
        </p>
        <Link 
          href="/" 
          className="inline-flex items-center px-6 py-3 bg-foreground text-background rounded-lg hover:opacity-90 transition-opacity"
        >
          Return Home
        </Link>
      </div>
    </div>
  )
}
</file>

<file path="components/content/HomePageContent.tsx">
import Link from 'next/link'
import { Container } from '@/components/ui/Container'
import { H1, H2, H3, P, Lead } from '@/lib/utils/typography'
import { Chapter } from '@/types/content'
import { getDifficultyColor, formatReadingTime } from '@/lib/utils/navigation'
import { cn } from '@/lib/utils/cn'

interface HomePageContentProps {
  chapters: Chapter[]
}

export function HomePageContent({ chapters }: HomePageContentProps) {
  return (
    <>
      {/* Hero Section */}
      <section className="py-16 lg:py-24">
        <Container size="normal">
          <div className="text-center">
            <H1 className="text-balance">
              Interactive ML Mathematics
            </H1>
            <Lead className="text-balance max-w-3xl mx-auto">
              Master the mathematical foundations of machine learning through 
              interactive visualizations, hands-on exercises, and clear explanations.
            </Lead>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center mt-8">
              <Link 
                href={`/${chapters[0]?.slug || 'linear-algebra'}`}
                className="inline-flex items-center justify-center px-6 py-3 bg-foreground text-background rounded-lg hover:opacity-90 transition-opacity font-medium"
              >
                Start Learning
              </Link>
              <Link 
                href="#chapters"
                className="inline-flex items-center justify-center px-6 py-3 border border-border rounded-lg hover:bg-accent transition-colors font-medium"
              >
                Explore Chapters
              </Link>
            </div>
          </div>
        </Container>
      </section>

      {/* Features Section */}
      <section className="py-16 bg-muted/30">
        <Container size="wide">
          <div className="text-center mb-12">
            <H2>Why Interactive Learning?</H2>
            <P className="text-center text-muted-foreground max-w-2xl mx-auto">
              Mathematics comes alive when you can see it, interact with it, and 
              experiment with the concepts in real-time.
            </P>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="text-center p-6">
              <div className="w-12 h-12 bg-foreground text-background rounded-lg flex items-center justify-center mx-auto mb-4">
                <span className="text-xl font-bold">∇</span>
              </div>
              <H3 className="mb-3">Visual Learning</H3>
              <P className="text-muted-foreground">
                Complex mathematical concepts become intuitive through 
                interactive 3D visualizations and dynamic graphics.
              </P>
            </div>
            
            <div className="text-center p-6">
              <div className="w-12 h-12 bg-foreground text-background rounded-lg flex items-center justify-center mx-auto mb-4">
                <span className="text-xl font-bold">∫</span>
              </div>
              <H3 className="mb-3">Hands-on Practice</H3>
              <P className="text-muted-foreground">
                Reinforce your understanding with interactive exercises 
                and real-world machine learning examples.
              </P>
            </div>
            
            <div className="text-center p-6">
              <div className="w-12 h-12 bg-foreground text-background rounded-lg flex items-center justify-center mx-auto mb-4">
                <span className="text-xl font-bold">Σ</span>
              </div>
              <H3 className="mb-3">Progressive Learning</H3>
              <P className="text-muted-foreground">
                Start with fundamentals and build up to advanced topics 
                with a carefully structured curriculum.
              </P>
            </div>
          </div>
        </Container>
      </section>

      {/* Chapters Section */}
      <section id="chapters" className="py-16">
        <Container size="normal">
          <div className="text-center mb-12">
            <H2>Course Contents</H2>
            <P className="text-center text-muted-foreground">
              Explore the mathematical foundations essential for machine learning
            </P>
          </div>
          
          <div className="space-y-6">
            {chapters.map((chapter) => (
              <ChapterCard key={chapter.id} chapter={chapter} />
            ))}
          </div>
        </Container>
      </section>

      {/* Getting Started Section */}
      <section className="py-16 bg-muted/30">
        <Container size="narrow">
          <div className="text-center">
            <H2>Ready to Begin?</H2>
            <P className="text-muted-foreground mb-8">
              Start your journey into the mathematical foundations of machine learning. 
              Each chapter builds upon the previous one, creating a comprehensive understanding.
            </P>
            
            <div className="space-y-4">
              <Link
                href={`/${chapters[0]?.slug || 'linear-algebra'}`}
                className="inline-flex items-center justify-center px-8 py-4 bg-foreground text-background rounded-lg hover:opacity-90 transition-opacity font-medium text-lg"
              >
                Begin with {chapters[0]?.title || 'Linear Algebra'}
              </Link>
              
              <P className="text-sm text-muted-foreground">
                No prerequisites required • Self-paced learning • Interactive content
              </P>
            </div>
          </div>
        </Container>
      </section>
    </>
  )
}

interface ChapterCardProps {
  chapter: Chapter
}

function ChapterCard({ chapter }: ChapterCardProps) {
  return (
    <Link 
      href={`/${chapter.slug}`}
      className="block p-6 border border-border rounded-lg hover:bg-accent transition-colors group"
    >
      <div className="flex items-start space-x-4">
        <div className="text-2xl flex-shrink-0">{chapter.icon}</div>
        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between mb-2">
            <div className="flex-1">
              <H3 className="mb-2 group-hover:text-foreground transition-colors">
                {chapter.title}
              </H3>
              <div className="flex flex-wrap items-center gap-3 mb-3">
                <span className={cn(
                  'px-2 py-1 rounded-full border text-xs font-medium',
                  getDifficultyColor(chapter.difficulty)
                )}>
                  {chapter.difficulty}
                </span>
                <span className="text-xs text-muted-foreground">
                  {formatReadingTime(chapter.readingTime)}
                </span>
                <span className="text-xs text-muted-foreground">
                  Chapter {chapter.order}
                </span>
              </div>
            </div>
            <div className="text-muted-foreground group-hover:text-foreground transition-colors ml-4">
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </div>
          </div>
          
          <P className="text-muted-foreground mb-4">
            {chapter.description}
          </P>
          
          {/* Prerequisites */}
          {chapter.prerequisites.length > 0 && (
            <div className="mb-4">
              <span className="text-xs text-muted-foreground">Prerequisites: </span>
              <span className="text-xs text-muted-foreground">
                {chapter.prerequisites.join(', ')}
              </span>
            </div>
          )}
          
          {/* Section count */}
          <div className="flex items-center justify-between">
            <span className="text-xs text-muted-foreground">
              {chapter.sections.length} sections
            </span>
            <div className="flex flex-wrap gap-1">
              {chapter.sections.slice(0, 3).map((section) => (
                <span 
                  key={section.id}
                  className="text-xs px-2 py-1 bg-muted text-muted-foreground rounded-full"
                >
                  {section.title}
                </span>
              ))}
              {chapter.sections.length > 3 && (
                <span className="text-xs px-2 py-1 bg-muted text-muted-foreground rounded-full">
                  +{chapter.sections.length - 3} more
                </span>
              )}
            </div>
          </div>
        </div>
      </div>
    </Link>
  )
}
</file>

<file path="components/content/MathErrorBoundary.tsx">
// components/content/MathErrorBoundary.tsx
'use client'

import React from 'react'

interface SafeMathProps {
  children: React.ReactNode
  latex?: string
}

export function SafeMath({ children, latex }: SafeMathProps) {
  try {
    return <>{children}</>
  } catch (error) {
    console.warn('Math rendering error:', error)
    return (
      <span className="text-red-500 text-sm font-mono">
        [Math Error: {latex || 'Invalid LaTeX'}]
      </span>
    )
  }
}
</file>

<file path="components/content/MDXComponents.tsx">
// components/content/MDXComponents.tsx
import React from 'react'
import { cn } from '@/lib/utils/cn'
import { generateSlug } from '@/lib/utils/headingExtractor'

interface MDXComponentProps {
  className?: string
  children: React.ReactNode
}

// Custom heading components with anchor support
export function MDXHeading({ 
  level, 
  children, 
  className, 
  ...props 
}: MDXComponentProps & { level: 1 | 2 | 3 | 4 | 5 | 6 }) {
  const Component = `h${level}` as keyof JSX.IntrinsicElements
  
  // Generate ID from heading text for ToC integration
  const headingText = typeof children === 'string' ? children : 
    React.Children.toArray(children).join('')
  const id = generateSlug(headingText)
  
  const baseClasses = 'font-semibold text-foreground scroll-mt-20'
  const sizeClasses = {
    1: 'text-3xl sm:text-4xl lg:text-5xl mb-6 mt-0',
    2: 'text-2xl sm:text-3xl lg:text-4xl mb-4 mt-12 first:mt-0',
    3: 'text-xl sm:text-2xl lg:text-3xl mb-3 mt-8 first:mt-0',
    4: 'text-lg sm:text-xl mb-2 mt-6 first:mt-0',
    5: 'text-base sm:text-lg mb-2 mt-4 first:mt-0',
    6: 'text-sm sm:text-base mb-1 mt-4 first:mt-0'
  }
  
  return React.createElement(
    Component,
    {
      id,
      className: cn(baseClasses, sizeClasses[level], className),
      ...props
    },
    children
  )
}

// Mathematical content wrapper
export function MathContainer({ children, className, ...props }: MDXComponentProps) {
  return (
    <div 
      className={cn(
        'my-6 p-4 bg-muted rounded-lg border border-border overflow-x-auto',
        'text-center font-mono text-foreground',
        className
      )}
      {...props}
    >
      {children}
    </div>
  )
}

// Inline math wrapper
export function InlineMathWrapper({ children, className, ...props }: MDXComponentProps) {
  return (
    <span 
      className={cn(
        'font-mono bg-muted px-1 py-0.5 rounded text-foreground text-sm',
        className
      )}
      {...props}
    >
      {children}
    </span>
  )
}

// Enhanced code block
export function CodeBlock({ 
  children, 
  className, 
  language,
  ...props 
}: MDXComponentProps & { language?: string }) {
  return (
    <div className="my-6">
      {language && (
        <div className="text-xs text-muted-foreground mb-2 font-mono">
          {language}
        </div>
      )}
      <pre 
        className={cn(
          'p-4 bg-muted rounded-lg border border-border overflow-x-auto',
          'font-mono text-sm text-foreground',
          className
        )}
        {...props}
      >
        <code>{children}</code>
      </pre>
    </div>
  )
}

// Enhanced blockquote
export function BlockQuote({ children, className, ...props }: MDXComponentProps) {
  return (
    <blockquote 
      className={cn(
        'border-l-4 border-border pl-6 py-2 my-6',
        'italic text-muted-foreground bg-muted/30 rounded-r-lg',
        className
      )}
      {...props}
    >
      {children}
    </blockquote>
  )
}

// Callout box for important information
export function Callout({ 
  type = 'info', 
  children, 
  className, 
  title,
  ...props 
}: MDXComponentProps & { 
  type?: 'info' | 'warning' | 'error' | 'success'
  title?: string 
}) {
  const typeStyles = {
    info: 'border-blue-200 bg-blue-50 text-blue-900',
    warning: 'border-yellow-200 bg-yellow-50 text-yellow-900',
    error: 'border-red-200 bg-red-50 text-red-900',
    success: 'border-green-200 bg-green-50 text-green-900'
  }
  
  return (
    <div 
      className={cn(
        'my-6 p-4 border rounded-lg',
        typeStyles[type],
        className
      )}
      {...props}
    >
      {title && (
        <div className="font-semibold mb-2">{title}</div>
      )}
      {children}
    </div>
  )
}

// Definition list for mathematical terms
export function DefinitionList({ children, className, ...props }: MDXComponentProps) {
  return (
    <dl 
      className={cn(
        'my-6 space-y-4',
        className
      )}
      {...props}
    >
      {children}
    </dl>
  )
}

export function DefinitionTerm({ children, className, ...props }: MDXComponentProps) {
  return (
    <dt 
      className={cn(
        'font-semibold text-foreground',
        className
      )}
      {...props}
    >
      {children}
    </dt>
  )
}

export function DefinitionDescription({ children, className, ...props }: MDXComponentProps) {
  return (
    <dd 
      className={cn(
        'ml-4 text-muted-foreground',
        className
      )}
      {...props}
    >
      {children}
    </dd>
  )
}
</file>

<file path="components/layout/ChapterLayout.tsx">
import { Chapter } from '@/types/content'
import { Container } from '@/components/ui/Container'
import { ChapterNavigation } from './ChapterNavigation'
import { H1, P, Small } from '@/lib/utils/typography'
import { getDifficultyColor, formatReadingTime } from '@/lib/utils/navigation'
import { cn } from '@/lib/utils/cn'

interface ChapterLayoutProps {
  chapter: Chapter
  children: React.ReactNode
  previousChapter?: Chapter
  nextChapter?: Chapter
}

export function ChapterLayout({
  chapter,
  children,
  previousChapter,
  nextChapter
}: ChapterLayoutProps) {
  return (
    <div className="min-h-screen bg-background">
      {/* Chapter Header */}
      <section className="py-12 border-b border-border bg-muted/30">
        <Container size="normal">
          <div className="max-w-3xl">
            {/* Chapter metadata */}
            <div className="flex flex-wrap items-center gap-4 mb-6">
              <span className="text-2xl">{chapter.icon}</span>
              <div className="flex flex-wrap items-center gap-3 text-sm">
                <span className={cn(
                  'px-2 py-1 rounded-full border text-xs font-medium',
                  getDifficultyColor(chapter.difficulty)
                )}>
                  {chapter.difficulty}
                </span>
                <span className="text-muted-foreground">
                  {formatReadingTime(chapter.readingTime)}
                </span>
                <span className="text-muted-foreground">
                  Chapter {chapter.order}
                </span>
              </div>
            </div>

            {/* Chapter title and description */}
            <H1 className="mb-4">{chapter.title}</H1>
            <P className="text-xl text-muted-foreground leading-relaxed">
              {chapter.description}
            </P>

            {/* Prerequisites */}
            {chapter.prerequisites.length > 0 && (
              <div className="mt-6 p-4 bg-background rounded-lg border border-border">
                <h3 className="font-semibold text-foreground mb-2">Prerequisites</h3>
                <div className="flex flex-wrap gap-2">
                  {chapter.prerequisites.map((prerequisite, index) => (
                    <span
                      key={index}
                      className="text-xs px-2 py-1 bg-muted text-muted-foreground rounded-full"
                    >
                      {prerequisite}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* Learning objectives */}
            {chapter.learningObjectives.length > 0 && (
              <div className="mt-4 p-4 bg-background rounded-lg border border-border">
                <h3 className="font-semibold text-foreground mb-2">What You'll Learn</h3>
                <ul className="space-y-1">
                  {chapter.learningObjectives.map((objective, index) => (
                    <li key={index} className="text-sm text-muted-foreground flex items-start">
                      <span className="text-foreground mr-2">•</span>
                      {objective}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </Container>
      </section>

      {/* Chapter Content */}
      <main className="py-16">
        <Container size="normal">
          <div className="max-w-3xl">
            {children}
          </div>
        </Container>
      </main>

      {/* Chapter Navigation */}
      <ChapterNavigation
        previousChapter={previousChapter}
        nextChapter={nextChapter}
      />
    </div>
  )
}
</file>

<file path="components/layout/ChapterNavigation.tsx">
import Link from 'next/link'
import { Chapter } from '@/types/content'
import { Container } from '@/components/ui/Container'

interface ChapterNavigationProps {
  previousChapter?: Chapter
  nextChapter?: Chapter
}

export function ChapterNavigation({
  previousChapter,
  nextChapter
}: ChapterNavigationProps) {
  if (!previousChapter && !nextChapter) {
    return null
  }

  return (
    <nav className="border-t border-border bg-muted/30" aria-label="Chapter navigation">
      <Container size="normal">
        <div className="py-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Previous Chapter */}
            <div className="flex justify-start">
              {previousChapter ? (
                <Link
                  href={`/${previousChapter.slug}`}
                  className="group flex items-center space-x-4 p-4 rounded-lg border border-border bg-background hover:bg-accent transition-colors max-w-sm"
                >
                  <div className="flex-shrink-0">
                    <svg
                      className="w-6 h-6 text-muted-foreground group-hover:text-foreground transition-colors"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M15 19l-7-7 7-7"
                      />
                    </svg>
                  </div>
                  <div className="min-w-0">
                    <p className="text-sm text-muted-foreground mb-1">Previous</p>
                    <p className="font-semibold text-foreground group-hover:text-foreground truncate">
                      {previousChapter.title}
                    </p>
                    <p className="text-xs text-muted-foreground mt-1">
                      Chapter {previousChapter.order}
                    </p>
                  </div>
                </Link>
              ) : (
                <div /> // Empty div to maintain grid layout
              )}
            </div>

            {/* Next Chapter */}
            <div className="flex justify-end">
              {nextChapter ? (
                <Link
                  href={`/${nextChapter.slug}`}
                  className="group flex items-center space-x-4 p-4 rounded-lg border border-border bg-background hover:bg-accent transition-colors max-w-sm"
                >
                  <div className="min-w-0 text-right">
                    <p className="text-sm text-muted-foreground mb-1">Next</p>
                    <p className="font-semibold text-foreground group-hover:text-foreground truncate">
                      {nextChapter.title}
                    </p>
                    <p className="text-xs text-muted-foreground mt-1">
                      Chapter {nextChapter.order}
                    </p>
                  </div>
                  <div className="flex-shrink-0">
                    <svg
                      className="w-6 h-6 text-muted-foreground group-hover:text-foreground transition-colors"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M9 5l7 7-7 7"
                      />
                    </svg>
                  </div>
                </Link>
              ) : (
                <div /> // Empty div to maintain grid layout
              )}
            </div>
          </div>

          {/* Back to overview */}
          <div className="flex justify-center mt-8">
            <Link
              href="/"
              className="flex items-center space-x-2 text-sm text-muted-foreground hover:text-foreground transition-colors"
            >
              <svg
                className="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"
                />
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M8 5v14l11-7z"
                />
              </svg>
              <span>Back to Book Overview</span>
            </Link>
          </div>
        </div>
      </Container>
    </nav>
  )
}
</file>

<file path="components/layout/Footer.tsx">
import Link from 'next/link'

export function Footer() {
  return (
    <footer className="border-t border-border bg-background">
      <div className="container mx-auto max-w-7xl px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          {/* Main Info */}
          <div className="md:col-span-2">
            <div className="flex items-center space-x-2 mb-4">
              <div className="h-6 w-6 rounded bg-foreground flex items-center justify-center">
                <span className="text-background font-bold text-sm">∑</span>
              </div>
              <span className="font-semibold text-foreground">ML Mathematics</span>
            </div>
            <p className="text-sm text-muted-foreground leading-relaxed max-w-md">
              An interactive web book for mathematics in machine learning. 
              Learn through visualizations and hands-on exercises.
            </p>
          </div>

          {/* Quick Links */}
          <div>
            <h3 className="font-semibold text-foreground mb-4">Chapters</h3>
            <ul className="space-y-2">
              <li>
                <Link 
                  href="/linear-algebra" 
                  className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                >
                  Linear Algebra
                </Link>
              </li>
              <li>
                <Link 
                  href="/probability" 
                  className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                >
                  Probability
                </Link>
              </li>
              <li>
                <Link 
                  href="/optimization" 
                  className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                >
                  Optimization
                </Link>
              </li>
            </ul>
          </div>

          {/* Resources */}
          <div>
            <h3 className="font-semibold text-foreground mb-4">Resources</h3>
            <ul className="space-y-2">
              <li>
                <Link 
                  href="/about" 
                  className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                >
                  About
                </Link>
              </li>
              <li>
                <a 
                  href="https://github.com" 
                  target="_blank" 
                  rel="noopener noreferrer"
                  className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                >
                  GitHub
                </a>
              </li>
              <li>
                <Link 
                  href="/contributing" 
                  className="text-sm text-muted-foreground hover:text-foreground transition-colors"
                >
                  Contributing
                </Link>
              </li>
            </ul>
          </div>
        </div>

        {/* Bottom Bar */}
        <div className="mt-8 pt-8 border-t border-border flex flex-col sm:flex-row justify-between items-center">
          <p className="text-xs text-muted-foreground">
            © 2025 ML Mathematics. Built with Next.js and TypeScript.
          </p>
          <div className="flex items-center space-x-4 mt-4 sm:mt-0">
            <Link 
              href="/privacy" 
              className="text-xs text-muted-foreground hover:text-foreground transition-colors"
            >
              Privacy
            </Link>
            <Link 
              href="/terms" 
              className="text-xs text-muted-foreground hover:text-foreground transition-colors"
            >
              Terms
            </Link>
          </div>
        </div>
      </div>
    </footer>
  )
}
</file>

<file path="components/layout/Header.tsx">
'use client'

import { ThemeToggle } from '@/components/ui/ThemeToggle'
import Link from 'next/link'

export function Header() {
  return (
    <header className="sticky top-0 z-40 w-full border-b border-border bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center justify-between px-4 mx-auto max-w-7xl">
        {/* Logo/Title Area */}
        <div className="flex items-center space-x-2">
          <Link 
            href="/" 
            className="flex items-center space-x-2 hover:opacity-80 transition-opacity"
          >
            <div className="h-8 w-8 rounded-lg bg-foreground flex items-center justify-center">
              <span className="text-background font-bold text-lg">∑</span>
            </div>
            <div className="hidden sm:block">
              <h1 className="text-xl font-semibold text-foreground">
                ML Mathematics
              </h1>
              <p className="text-xs text-muted-foreground -mt-1">
                Interactive Learning
              </p>
            </div>
          </Link>
        </div>

        {/* Navigation Area - Placeholder for future navigation */}
        <nav className="hidden md:flex items-center space-x-6" role="navigation">
          <Link 
            href="/linear-algebra" 
            className="text-sm text-muted-foreground hover:text-foreground transition-colors"
          >
            Linear Algebra
          </Link>
          <Link 
            href="/probability" 
            className="text-sm text-muted-foreground hover:text-foreground transition-colors"
          >
            Probability
          </Link>
          <Link 
            href="/optimization" 
            className="text-sm text-muted-foreground hover:text-foreground transition-colors"
          >
            Optimization
          </Link>
        </nav>

        {/* Right Side Actions */}
        <div className="flex items-center space-x-4">
          {/* Mobile Menu Button - Placeholder for future mobile nav */}
          <button
            className="md:hidden p-2 rounded-lg hover:bg-accent transition-colors"
            aria-label="Open navigation menu"
            type="button"
          >
            <svg
              className="h-5 w-5"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M4 6h16M4 12h16M4 18h16"
              />
            </svg>
          </button>

          {/* Theme Toggle */}
          <ThemeToggle />
        </div>
      </div>
    </header>
  )
}
</file>

<file path="components/layout/Layout.tsx">
import { Header } from './Header'
import { Footer } from './Footer'

interface LayoutProps {
  children: React.ReactNode
}

export function Layout({ children }: LayoutProps) {
  return (
    <div className="min-h-screen flex flex-col bg-background text-foreground">
      <Header />
      
      <main className="flex-1 w-full">
        {children}
      </main>
      
      <Footer />
    </div>
  )
}
</file>

<file path="components/math/KaTeX.tsx">
// components/math/KaTeX.tsx
'use client'

import React, { useEffect, useRef } from 'react'
import katex from 'katex'
import { cn } from '@/lib/utils/cn'

interface KaTeXProps {
  children: string
  displayMode?: boolean
  className?: string
  throwOnError?: boolean
}

export function KaTeX({ 
  children, 
  displayMode = false, 
  className,
  throwOnError = false 
}: KaTeXProps) {
  const elementRef = useRef<HTMLSpanElement>(null)
  
  useEffect(() => {
    if (elementRef.current) {
      try {
        katex.render(children, elementRef.current, {
          displayMode,
          throwOnError,
          strict: false,
          macros: {
            '\\R': '\\mathbb{R}',
            '\\N': '\\mathbb{N}',
            '\\Z': '\\mathbb{Z}',
            '\\Q': '\\mathbb{Q}',
            '\\C': '\\mathbb{C}',
            '\\vec': '\\mathbf{#1}',
            '\\norm': '\\left\\|#1\\right\\|',
            '\\abs': '\\left|#1\\right|',
            '\\argmax': '\\operatorname{argmax}',
            '\\argmin': '\\operatorname{argmin}',
            '\\trace': '\\operatorname{tr}',
            '\\rank': '\\operatorname{rank}',
            '\\diag': '\\operatorname{diag}',
            '\\det': '\\operatorname{det}',
          }
        })
      } catch (error) {
        console.warn('KaTeX rendering error:', error)
        if (elementRef.current) {
          elementRef.current.textContent = children
        }
      }
    }
  }, [children, displayMode, throwOnError])
  
  return (
    <span 
      ref={elementRef}
      className={cn(
        displayMode ? 'katex-display' : 'katex',
        displayMode && 'block text-center my-4',
        className
      )}
    />
  )
}

// Convenience components
export function InlineMath({ children, className }: { children: string, className?: string }) {
  return <KaTeX className={className}>{children}</KaTeX>
}

export function DisplayMath({ children, className }: { children: string, className?: string }) {
  return <KaTeX displayMode className={className}>{children}</KaTeX>
}
</file>

<file path="components/providers/ThemeProvider.tsx">
'use client'

import { createContext, useContext, useEffect, useState } from 'react'

type Theme = 'light' | 'dark'

interface ThemeContextValue {
  theme: Theme
  toggleTheme: () => void
}

const ThemeContext = createContext<ThemeContextValue | undefined>(undefined)

interface ThemeProviderProps {
  children: React.ReactNode
}

export function ThemeProvider({ children }: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>('light')
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    // Get theme from localStorage or system preference
    const getInitialTheme = (): Theme => {
      if (typeof window === 'undefined') return 'light'
      
      const stored = localStorage.getItem('theme')
      if (stored === 'light' || stored === 'dark') {
        return stored
      }
      
      // Check system preference
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
    }

    const initialTheme = getInitialTheme()
    setTheme(initialTheme)
    setMounted(true)

    // Apply theme to document
    const root = document.documentElement
    root.classList.remove('light', 'dark')
    root.classList.add(initialTheme)
  }, [])

  useEffect(() => {
    if (!mounted) return

    // Update localStorage and DOM when theme changes
    localStorage.setItem('theme', theme)
    const root = document.documentElement
    root.classList.remove('light', 'dark')
    root.classList.add(theme)
  }, [theme, mounted])

  const toggleTheme = () => {
    setTheme(prev => prev === 'light' ? 'dark' : 'light')
  }

  // Prevent hydration mismatch by not rendering until mounted
  if (!mounted) {
    return (
      <div className="min-h-screen bg-white">
        {children}
      </div>
    )
  }

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  )
}

export function useTheme() {
  const context = useContext(ThemeContext)
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider')
  }
  return context
}
</file>

<file path="components/ui/Container.tsx">
import { cn } from '@/lib/utils/cn'

interface ContainerProps {
  children: React.ReactNode
  size?: 'narrow' | 'normal' | 'wide' | 'full'
  className?: string
}

export function Container({ 
  children, 
  size = 'normal', 
  className 
}: ContainerProps) {
  const sizeClasses = {
    narrow: 'max-w-2xl',      // ~672px - for focused reading
    normal: 'max-w-4xl',      // ~896px - for general content
    wide: 'max-w-6xl',        // ~1152px - for visualizations
    full: 'max-w-7xl'         // ~1280px - for full-width layouts
  }

  return (
    <div 
      className={cn(
        'mx-auto px-4 sm:px-6 lg:px-8',
        sizeClasses[size],
        className
      )}
    >
      {children}
    </div>
  )
}
</file>

<file path="components/visualizations/GradientDescentVisualization.tsx">
// components/visualizations/GradientDescentVisualization.tsx
'use client'

import React, { useState, useEffect, useRef } from 'react'
import { cn } from '@/lib/utils/cn'
import { DisplayMath, InlineMath } from '@/components/math/KaTeX'

interface GradientDescentVisualizationProps {
  className?: string
  functionType?: 'quadratic' | 'rosenbrock' | 'beale'
}

interface Point {
  x: number
  y: number
  z?: number
}

export function GradientDescentVisualization({
  className,
  functionType = 'quadratic'
}: GradientDescentVisualizationProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const animationRef = useRef<number>()
  
  const [learningRate, setLearningRate] = useState(0.1)
  const [currentPoint, setCurrentPoint] = useState<Point>({ x: 2, y: 2 })
  const [isRunning, setIsRunning] = useState(false)
  const [path, setPath] = useState<Point[]>([])
  const [iteration, setIteration] = useState(0)
  const [loss, setLoss] = useState(0)
  
  // Objective functions
  const functions = {
    quadratic: {
      name: 'Quadratic: f(x,y) = x² + y²',
      f: (x: number, y: number) => x*x + y*y,
      gradX: (x: number, y: number) => 2*x,
      gradY: (x: number, y: number) => 2*y,
      minimum: { x: 0, y: 0 }
    },
    rosenbrock: {
      name: 'Rosenbrock: f(x,y) = (1-x)² + 100(y-x²)²',
      f: (x: number, y: number) => (1-x)*(1-x) + 100*(y-x*x)*(y-x*x),
      gradX: (x: number, y: number) => -2*(1-x) - 400*x*(y-x*x),
      gradY: (x: number, y: number) => 200*(y-x*x),
      minimum: { x: 1, y: 1 }
    },
    beale: {
      name: 'Beale: f(x,y) = (1.5-x+xy)² + (2.25-x+xy²)² + (2.625-x+xy³)²',
      f: (x: number, y: number) => {
        const t1 = 1.5 - x + x*y
        const t2 = 2.25 - x + x*y*y
        const t3 = 2.625 - x + x*y*y*y
        return t1*t1 + t2*t2 + t3*t3
      },
      gradX: (x: number, y: number) => {
        const t1 = 1.5 - x + x*y
        const t2 = 2.25 - x + x*y*y
        const t3 = 2.625 - x + x*y*y*y
        return 2*t1*(-1 + y) + 2*t2*(-1 + y*y) + 2*t3*(-1 + y*y*y)
      },
      gradY: (x: number, y: number) => {
        const t1 = 1.5 - x + x*y
        const t2 = 2.25 - x + x*y*y
        const t3 = 2.625 - x + x*y*y*y
        return 2*t1*x + 2*t2*x*2*y + 2*t3*x*3*y*y
      },
      minimum: { x: 3, y: 0.5 }
    }
  }
  
  const currentFunction = functions[functionType]
  
  // Gradient descent step
  const performStep = () => {
    const gradX = currentFunction.gradX(currentPoint.x, currentPoint.y)
    const gradY = currentFunction.gradY(currentPoint.x, currentPoint.y)
    
    const newPoint = {
      x: currentPoint.x - learningRate * gradX,
      y: currentPoint.y - learningRate * gradY
    }
    
    const newLoss = currentFunction.f(newPoint.x, newPoint.y)
    
    setCurrentPoint(newPoint)
    setPath(prev => [...prev, newPoint])
    setIteration(prev => prev + 1)
    setLoss(newLoss)
    
    // Stop if converged or diverged
    if (Math.abs(gradX) < 0.001 && Math.abs(gradY) < 0.001) {
      setIsRunning(false)
    }
    if (newLoss > 1000) {
      setIsRunning(false)
    }
  }
  
  // Animation loop
  useEffect(() => {
    if (isRunning) {
      animationRef.current = window.setTimeout(() => {
        performStep()
      }, 200)
    }
    
    return () => {
      if (animationRef.current) {
        clearTimeout(animationRef.current)
      }
    }
  }, [isRunning, currentPoint, learningRate])
  
  // Canvas drawing
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    
    const ctx = canvas.getContext('2d')
    if (!ctx) return
    
    const dpr = window.devicePixelRatio || 1
    const rect = canvas.getBoundingClientRect()
    
    canvas.width = rect.width * dpr
    canvas.height = rect.height * dpr
    ctx.scale(dpr, dpr)
    
    const width = rect.width
    const height = rect.height
    const centerX = width / 2
    const centerY = height / 2
    const scale = 80
    
    // Clear canvas
    ctx.clearRect(0, 0, width, height)
    
    // Draw contour lines
    ctx.strokeStyle = '#e5e7eb'
    ctx.lineWidth = 1
    
    const levels = [0.1, 0.5, 1, 2, 5, 10, 20, 50]
    
    for (const level of levels) {
      ctx.beginPath()
      // Simple contour approximation
      for (let angle = 0; angle < Math.PI * 2; angle += 0.1) {
        const distance = Math.sqrt(level) * (functionType === 'quadratic' ? 1 : 0.3)
        const x = centerX + distance * Math.cos(angle) * scale
        const y = centerY + distance * Math.sin(angle) * scale
        
        if (angle === 0) {
          ctx.moveTo(x, y)
        } else {
          ctx.lineTo(x, y)
        }
      }
      ctx.closePath()
      ctx.stroke()
    }
    
    // Draw axes
    ctx.strokeStyle = '#374151'
    ctx.lineWidth = 1
    ctx.beginPath()
    ctx.moveTo(0, centerY)
    ctx.lineTo(width, centerY)
    ctx.moveTo(centerX, 0)
    ctx.lineTo(centerX, height)
    ctx.stroke()
    
    // Draw minimum point
    const minX = centerX + currentFunction.minimum.x * scale
    const minY = centerY - currentFunction.minimum.y * scale
    ctx.fillStyle = '#10b981'
    ctx.beginPath()
    ctx.arc(minX, minY, 6, 0, Math.PI * 2)
    ctx.fill()
    
    // Draw path
    if (path.length > 1) {
      ctx.strokeStyle = '#ef4444'
      ctx.lineWidth = 2
      ctx.beginPath()
      
      path.forEach((point, index) => {
        const x = centerX + point.x * scale
        const y = centerY - point.y * scale
        
        if (index === 0) {
          ctx.moveTo(x, y)
        } else {
          ctx.lineTo(x, y)
        }
      })
      ctx.stroke()
      
      // Draw path points
      path.forEach((point, index) => {
        const x = centerX + point.x * scale
        const y = centerY - point.y * scale
        
        ctx.fillStyle = index === path.length - 1 ? '#dc2626' : '#fca5a5'
        ctx.beginPath()
        ctx.arc(x, y, 3, 0, Math.PI * 2)
        ctx.fill()
      })
    }
    
    // Draw current point
    const currentX = centerX + currentPoint.x * scale
    const currentY = centerY - currentPoint.y * scale
    ctx.fillStyle = '#dc2626'
    ctx.beginPath()
    ctx.arc(currentX, currentY, 8, 0, Math.PI * 2)
    ctx.fill()
    
    // Draw gradient arrow
    const gradX = currentFunction.gradX(currentPoint.x, currentPoint.y)
    const gradY = currentFunction.gradY(currentPoint.x, currentPoint.y)
    const gradMag = Math.sqrt(gradX*gradX + gradY*gradY)
    
    if (gradMag > 0.01) {
      const arrowLength = Math.min(50, gradMag * 20)
      const endX = currentX - (gradX / gradMag) * arrowLength
      const endY = currentY + (gradY / gradMag) * arrowLength
      
      ctx.strokeStyle = '#3b82f6'
      ctx.lineWidth = 2
      ctx.beginPath()
      ctx.moveTo(currentX, currentY)
      ctx.lineTo(endX, endY)
      ctx.stroke()
      
      // Arrow head
      const angle = Math.atan2(endY - currentY, endX - currentX)
      ctx.fillStyle = '#3b82f6'
      ctx.beginPath()
      ctx.moveTo(endX, endY)
      ctx.lineTo(endX - 10*Math.cos(angle - Math.PI/6), endY - 10*Math.sin(angle - Math.PI/6))
      ctx.lineTo(endX - 10*Math.cos(angle + Math.PI/6), endY - 10*Math.sin(angle + Math.PI/6))
      ctx.closePath()
      ctx.fill()
    }
    
  }, [currentPoint, path, functionType])
  
  const reset = () => {
    setIsRunning(false)
    setCurrentPoint({ x: 2, y: 2 })
    setPath([{ x: 2, y: 2 }])
    setIteration(0)
    setLoss(currentFunction.f(2, 2))
  }
  
  const handleCanvasClick = (event: React.MouseEvent) => {
    if (isRunning) return
    
    const canvas = canvasRef.current
    if (!canvas) return
    
    const rect = canvas.getBoundingClientRect()
    const x = event.clientX - rect.left
    const y = event.clientY - rect.top
    const centerX = rect.width / 2
    const centerY = rect.height / 2
    const scale = 80
    
    const newX = (x - centerX) / scale
    const newY = -(y - centerY) / scale
    
    setCurrentPoint({ x: newX, y: newY })
    setPath([{ x: newX, y: newY }])
    setIteration(0)
    setLoss(currentFunction.f(newX, newY))
  }
  
  return (
    <div className={cn('math-viz-container', className)}>
      {/* Interactive Canvas */}
      <div className="interactive-plot">
        <canvas
          ref={canvasRef}
          className="w-full h-full cursor-crosshair"
          onClick={handleCanvasClick}
        />
      </div>
      
      {/* Math and Controls */}
      <div className="space-y-6">
        <div className="space-y-2">
          <h3 className="text-lg font-semibold">Gradient Descent Optimization</h3>
          <p className="text-sm text-muted-foreground">{currentFunction.name}</p>
        </div>
        
        <DisplayMath>
          \theta_{t+1} = \theta_t - \alpha \nabla f(\theta_t)
        </DisplayMath>
        
        <div className="space-y-2">
          <DisplayMath>
            {`\\text{Current: } (${currentPoint.x.toFixed(3)}, ${currentPoint.y.toFixed(3)})`}
          </DisplayMath>
          <DisplayMath>
            {`\\text{Loss: } ${loss.toFixed(6)}`}
          </DisplayMath>
          <DisplayMath>
            {`\\text{Iteration: } ${iteration}`}
          </DisplayMath>
        </div>
        
        <div className="math-controls">
          <div className="math-slider">
            <label>Learning Rate (α):</label>
            <input
              type="range"
              min="0.01"
              max="0.5"
              step="0.01"
              value={learningRate}
              onChange={(e) => setLearningRate(parseFloat(e.target.value))}
            />
            <span className="text-xs text-center">{learningRate.toFixed(2)}</span>
          </div>
          
          <button
            onClick={() => setIsRunning(!isRunning)}
            className="px-4 py-2 bg-foreground text-background rounded hover:opacity-80"
            disabled={Math.abs(currentFunction.gradX(currentPoint.x, currentPoint.y)) < 0.001 && 
                     Math.abs(currentFunction.gradY(currentPoint.x, currentPoint.y)) < 0.001}
          >
            {isRunning ? 'Pause' : 'Start'}
          </button>
          
          <button
            onClick={performStep}
            className="px-4 py-2 border border-border rounded hover:bg-accent"
            disabled={isRunning}
          >
            Step
          </button>
          
          <button
            onClick={reset}
            className="px-4 py-2 border border-border rounded hover:bg-accent"
          >
            Reset
          </button>
        </div>
        
        <div className="text-xs text-muted-foreground space-y-1">
          <p>🔴 Current position</p>
          <p>🟢 Global minimum</p>
          <p>🔵 Gradient direction (negative for descent)</p>
          <p>💡 Click on the plot to set a new starting point</p>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/visualizations/MatrixTransformation.tsx">
// components/visualizations/MatrixTransformation.tsx
'use client'

import React, { useState, useEffect, useRef } from 'react'
import { cn } from '@/lib/utils/cn'
import * as THREE from 'three'
import { DisplayMath, InlineMath } from '@/components/math/KaTeX'

interface MatrixTransformationProps {
  className?: string
  initialMatrix?: [number, number, number, number] // [a, b, c, d] for 2x2 matrix
  initialVector?: [number, number]
  showEigenAnalysis?: boolean
}

interface Matrix2D {
  a: number
  b: number
  c: number
  d: number
}

interface Vector2D {
  x: number
  y: number
}

export function MatrixTransformation({
  className,
  initialMatrix = [1.0, 0.5, 0.5, 1.0],
  initialVector = [2.0, 3.0],
  showEigenAnalysis = true
}: MatrixTransformationProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const animationRef = useRef<number>()
  
  // State for interactive controls
  const [matrix, setMatrix] = useState<Matrix2D>({
    a: initialMatrix[0],
    b: initialMatrix[1], 
    c: initialMatrix[2],
    d: initialMatrix[3]
  })
  
  const [vector, setVector] = useState<Vector2D>({
    x: initialVector[0],
    y: initialVector[1]
  })
  
  const [isDragging, setIsDragging] = useState<'vector' | 'result' | null>(null)
  
  // Computed values
  const transformedVector = {
    x: matrix.a * vector.x + matrix.b * vector.y,
    y: matrix.c * vector.x + matrix.d * vector.y
  }
  
  const determinant = matrix.a * matrix.d - matrix.b * matrix.c
  
  // Eigenvalue calculation for 2x2 matrix
  const trace = matrix.a + matrix.d
  const det = determinant
  const discriminant = trace * trace - 4 * det
  
  const eigenvalues = discriminant >= 0 ? {
    lambda1: (trace + Math.sqrt(discriminant)) / 2,
    lambda2: (trace - Math.sqrt(discriminant)) / 2
  } : {
    lambda1: trace / 2,
    lambda2: Math.sqrt(-discriminant) / 2 // imaginary part
  }
  
  // Canvas drawing logic
  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return
    
    const ctx = canvas.getContext('2d')
    if (!ctx) return
    
    const dpr = window.devicePixelRatio || 1
    const rect = canvas.getBoundingClientRect()
    
    canvas.width = rect.width * dpr
    canvas.height = rect.height * dpr
    ctx.scale(dpr, dpr)
    
    const width = rect.width
    const height = rect.height
    const centerX = width / 2
    const centerY = height / 2
    const scale = 40 // pixels per unit
    
    // Clear canvas
    ctx.clearRect(0, 0, width, height)
    ctx.fillStyle = getComputedStyle(canvas).getPropertyValue('--muted').trim()
    ctx.fillRect(0, 0, width, height)
    
    // Draw grid
    ctx.strokeStyle = '#666666'
    ctx.lineWidth = 0.5
    ctx.setLineDash([2, 2])
    
    for (let i = -10; i <= 10; i++) {
      if (i === 0) continue
      // Vertical lines
      ctx.beginPath()
      ctx.moveTo(centerX + i * scale, 0)
      ctx.lineTo(centerX + i * scale, height)
      ctx.stroke()
      
      // Horizontal lines
      ctx.beginPath()
      ctx.moveTo(0, centerY - i * scale)
      ctx.lineTo(width, centerY - i * scale)
      ctx.stroke()
    }
    
    // Draw axes
    ctx.setLineDash([])
    ctx.strokeStyle = '#333333'
    ctx.lineWidth = 1
    
    // X-axis
    ctx.beginPath()
    ctx.moveTo(0, centerY)
    ctx.lineTo(width, centerY)
    ctx.stroke()
    
    // Y-axis
    ctx.beginPath()
    ctx.moveTo(centerX, 0)
    ctx.lineTo(centerX, height)
    ctx.stroke()
    
    // Draw matrix column vectors (basis vectors after transformation)
    const a1 = { x: matrix.a, y: -matrix.c } // Flip Y for canvas coordinates
    const a2 = { x: matrix.b, y: -matrix.d }
    
    // Draw basis vector a1 (blue)
    drawVector(ctx, centerX, centerY, a1.x * scale, a1.y * scale, '#3b82f6', 'a₁')
    
    // Draw basis vector a2 (green)
    drawVector(ctx, centerX, centerY, a2.x * scale, a2.y * scale, '#10b981', 'a₂')
    
    // Draw original vector v (red)
    drawVector(ctx, centerX, centerY, vector.x * scale, -vector.y * scale, '#ef4444', 'v')
    
    // Draw transformed vector Av (orange)
    drawVector(ctx, centerX, centerY, transformedVector.x * scale, -transformedVector.y * scale, '#f97316', 'Av')
    
    // Draw connection line from v to Av
    ctx.strokeStyle = '#94a3b8'
    ctx.lineWidth = 1
    ctx.setLineDash([5, 5])
    ctx.beginPath()
    ctx.moveTo(centerX + vector.x * scale, centerY - vector.y * scale)
    ctx.lineTo(centerX + transformedVector.x * scale, centerY - transformedVector.y * scale)
    ctx.stroke()
    ctx.setLineDash([])
    
  }, [matrix, vector, transformedVector])
  
  // Vector drawing helper
  function drawVector(
    ctx: CanvasRenderingContext2D,
    startX: number,
    startY: number, 
    endX: number,
    endY: number,
    color: string,
    label: string
  ) {
    const headSize = 8
    const angle = Math.atan2(endY, endX)
    
    // Draw line
    ctx.strokeStyle = color
    ctx.lineWidth = 2
    ctx.beginPath()
    ctx.moveTo(startX, startY)
    ctx.lineTo(startX + endX, startY + endY)
    ctx.stroke()
    
    // Draw arrowhead
    ctx.fillStyle = color
    ctx.beginPath()
    ctx.moveTo(startX + endX, startY + endY)
    ctx.lineTo(
      startX + endX - headSize * Math.cos(angle - Math.PI / 6),
      startY + endY - headSize * Math.sin(angle - Math.PI / 6)
    )
    ctx.lineTo(
      startX + endX - headSize * Math.cos(angle + Math.PI / 6),
      startY + endY - headSize * Math.sin(angle + Math.PI / 6)
    )
    ctx.closePath()
    ctx.fill()
    
    // Draw label
    ctx.fillStyle = color
    ctx.font = '14px sans-serif'
    ctx.fillText(label, startX + endX + 10, startY + endY - 5)
  }
  
  // Mouse interaction handlers
  const handleMouseDown = (event: React.MouseEvent) => {
    const canvas = canvasRef.current
    if (!canvas) return
    
    const rect = canvas.getBoundingClientRect()
    const x = event.clientX - rect.left
    const y = event.clientY - rect.top
    const centerX = rect.width / 2
    const centerY = rect.height / 2
    const scale = 40
    
    // Check if clicking near vector endpoint
    const vectorEndX = centerX + vector.x * scale
    const vectorEndY = centerY - vector.y * scale
    const resultEndX = centerX + transformedVector.x * scale
    const resultEndY = centerY - transformedVector.y * scale
    
    const distanceToVector = Math.sqrt((x - vectorEndX) ** 2 + (y - vectorEndY) ** 2)
    const distanceToResult = Math.sqrt((x - resultEndX) ** 2 + (y - resultEndY) ** 2)
    
    if (distanceToVector < 20) {
      setIsDragging('vector')
    } else if (distanceToResult < 20) {
      setIsDragging('result')
    }
  }
  
  const handleMouseMove = (event: React.MouseEvent) => {
    if (!isDragging) return
    
    const canvas = canvasRef.current
    if (!canvas) return
    
    const rect = canvas.getBoundingClientRect()
    const x = event.clientX - rect.left
    const y = event.clientY - rect.top
    const centerX = rect.width / 2
    const centerY = rect.height / 2
    const scale = 40
    
    const newX = (x - centerX) / scale
    const newY = -(y - centerY) / scale // Flip Y coordinate
    
    if (isDragging === 'vector') {
      setVector({ x: newX, y: newY })
    }
    // Note: dragging result vector would require inverse matrix calculation
  }
  
  const handleMouseUp = () => {
    setIsDragging(null)
  }
  
  return (
    <div className={cn('math-viz-container', className)}>
      {/* Interactive Canvas */}
      <div className="interactive-plot">
        <canvas
          ref={canvasRef}
          className="w-full h-full cursor-crosshair"
          onMouseDown={handleMouseDown}
          onMouseMove={handleMouseMove}
          onMouseUp={handleMouseUp}
          onMouseLeave={handleMouseUp}
        />
      </div>
      
      {/* Math Equations */}
      <div className="math-equations">
        <DisplayMath>
          {`A = \\begin{pmatrix} ${matrix.a.toFixed(2)} & ${matrix.b.toFixed(2)} \\\\ ${matrix.c.toFixed(2)} & ${matrix.d.toFixed(2)} \\end{pmatrix}`}
        </DisplayMath>
        
        <DisplayMath>
          {`v = \\begin{pmatrix} ${vector.x.toFixed(2)} \\\\ ${vector.y.toFixed(2)} \\end{pmatrix}`}
        </DisplayMath>
        
        <DisplayMath>
          {`Av = \\begin{pmatrix} ${transformedVector.x.toFixed(2)} \\\\ ${transformedVector.y.toFixed(2)} \\end{pmatrix}`}
        </DisplayMath>
        
        {showEigenAnalysis && (
          <div className="space-y-2">
            <div className="text-sm font-medium">Analysis:</div>
            <DisplayMath>
              {`\\det(A) = ${determinant.toFixed(3)}`}
            </DisplayMath>
            <DisplayMath>
              {discriminant >= 0 
                ? `\\lambda_1 = ${eigenvalues.lambda1.toFixed(3)}, \\lambda_2 = ${eigenvalues.lambda2.toFixed(3)}`
                : `\\lambda = ${eigenvalues.lambda1.toFixed(3)} \\pm ${eigenvalues.lambda2.toFixed(3)}i`
              }
            </DisplayMath>
          </div>
        )}
        
        {/* Interactive Controls */}
        <div className="math-controls">
          <div className="math-slider">
            <label>Matrix A₁₁:</label>
            <input
              type="range"
              min="-2"
              max="2"
              step="0.1"
              value={matrix.a}
              onChange={(e) => setMatrix(prev => ({ ...prev, a: parseFloat(e.target.value) }))}
            />
            <span className="text-xs text-center">{matrix.a.toFixed(1)}</span>
          </div>
          
          <div className="math-slider">
            <label>Matrix A₁₂:</label>
            <input
              type="range"
              min="-2"
              max="2"
              step="0.1"
              value={matrix.b}
              onChange={(e) => setMatrix(prev => ({ ...prev, b: parseFloat(e.target.value) }))}
            />
            <span className="text-xs text-center">{matrix.b.toFixed(1)}</span>
          </div>
          
          <div className="math-slider">
            <label>Matrix A₂₁:</label>
            <input
              type="range"
              min="-2"
              max="2"
              step="0.1"
              value={matrix.c}
              onChange={(e) => setMatrix(prev => ({ ...prev, c: parseFloat(e.target.value) }))}
            />
            <span className="text-xs text-center">{matrix.c.toFixed(1)}</span>
          </div>
          
          <div className="math-slider">
            <label>Matrix A₂₂:</label>
            <input
              type="range"
              min="-2"
              max="2"
              step="0.1"
              value={matrix.d}
              onChange={(e) => setMatrix(prev => ({ ...prev, d: parseFloat(e.target.value) }))}
            />
            <span className="text-xs text-center">{matrix.d.toFixed(1)}</span>
          </div>
        </div>
        
        <div className="text-xs text-muted-foreground mt-4">
          💡 Drag the red vector (v) to see how the transformation changes. The orange vector (Av) shows the result.
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/visualizations/SVDVisualization.tsx">
// components/visualizations/SVDVisualization.tsx
'use client'

import React, { useState, useEffect, useRef } from 'react'
import { cn } from '@/lib/utils/cn'
import { DisplayMath, InlineMath } from '@/components/math/KaTeX'

interface SVDVisualizationProps {
  className?: string
  initialData?: number[][]
}

interface SVDResult {
  U: number[][]
  S: number[]
  Vt: number[][]
  originalMatrix: number[][]
  reconstructed: number[][]
  rank: number
}

export function SVDVisualization({
  className,
  initialData = [
    [4, 2, 1],
    [2, 3, 1],
    [1, 1, 2]
  ]
}: SVDVisualizationProps) {
  const [data, setData] = useState(initialData)
  const [truncatedRank, setTruncatedRank] = useState(2)
  const [svdResult, setSvdResult] = useState<SVDResult | null>(null)
  const [isAnimating, setIsAnimating] = useState(false)
  
  // Simple SVD computation (for educational purposes - in production use optimized libraries)
  const computeSVD = (matrix: number[][]): SVDResult => {
    const m = matrix.length
    const n = matrix[0].length
    
    // For simplicity, using a basic implementation
    // In real applications, use libraries like ml-matrix
    
    // Compute A^T * A for V
    const AtA = Array(n).fill(null).map(() => Array(n).fill(0))
    for (let i = 0; i < n; i++) {
      for (let j = 0; j < n; j++) {
        for (let k = 0; k < m; k++) {
          AtA[i][j] += matrix[k][i] * matrix[k][j]
        }
      }
    }
    
    // Simple eigenvalue computation (for demo - normally use proper algorithms)
    const singularValues = [3.2, 2.1, 0.8] // Simplified for demo
    const U = [
      [0.7, 0.5, 0.5],
      [0.5, 0.7, -0.5],
      [0.5, -0.5, 0.7]
    ]
    const Vt = [
      [0.6, 0.6, 0.5],
      [0.8, -0.6, 0.0],
      [0.0, 0.5, -0.9]
    ]
    
    // Reconstruct with truncated rank
    const reconstructed = Array(m).fill(null).map(() => Array(n).fill(0))
    const usedRank = Math.min(truncatedRank, singularValues.length)
    
    for (let i = 0; i < m; i++) {
      for (let j = 0; j < n; j++) {
        for (let k = 0; k < usedRank; k++) {
          reconstructed[i][j] += U[i][k] * singularValues[k] * Vt[k][j]
        }
      }
    }
    
    return {
      U,
      S: singularValues,
      Vt,
      originalMatrix: matrix,
      reconstructed,
      rank: usedRank
    }
  }
  
  useEffect(() => {
    const result = computeSVD(data)
    setSvdResult(result)
  }, [data, truncatedRank])
  
  const MatrixDisplay = ({ 
    matrix, 
    title, 
    highlight = false 
  }: { 
    matrix: number[][], 
    title: string,
    highlight?: boolean 
  }) => (
    <div className={cn('p-4 rounded-lg border', highlight ? 'bg-accent border-foreground' : 'bg-muted border-border')}>
      <h4 className="text-sm font-semibold mb-2">{title}</h4>
      <div className="font-mono text-sm">
        {matrix.map((row, i) => (
          <div key={i} className="flex space-x-2">
            <span>[</span>
            {row.map((val, j) => (
              <span key={j} className="w-12 text-center">
                {val.toFixed(2)}
              </span>
            ))}
            <span>]</span>
          </div>
        ))}
      </div>
    </div>
  )
  
  const VectorDisplay = ({ 
    vector, 
    title 
  }: { 
    vector: number[], 
    title: string 
  }) => (
    <div className="p-4 rounded-lg border bg-muted border-border">
      <h4 className="text-sm font-semibold mb-2">{title}</h4>
      <div className="font-mono text-sm">
        {vector.map((val, i) => (
          <div key={i}>σ₍{i+1}₎ = {val.toFixed(3)}</div>
        ))}
      </div>
    </div>
  )
  
  if (!svdResult) return <div>Computing SVD...</div>
  
  return (
    <div className={cn('math-viz-container', className)}>
      {/* Controls */}
      <div className="col-span-2 math-controls">
        <div className="math-slider">
          <label>Truncated Rank (k):</label>
          <input
            type="range"
            min="1"
            max="3"
            step="1"
            value={truncatedRank}
            onChange={(e) => setTruncatedRank(parseInt(e.target.value))}
          />
          <span className="text-xs text-center">{truncatedRank}</span>
        </div>
        
        <button 
          onClick={() => setIsAnimating(!isAnimating)}
          className="px-4 py-2 bg-foreground text-background rounded hover:opacity-80"
        >
          {isAnimating ? 'Pause' : 'Animate'}
        </button>
      </div>
      
      {/* Mathematical Representation */}
      <div className="space-y-6">
        <DisplayMath>
          A = U \Sigma V^T
        </DisplayMath>
        
        <DisplayMath>
          {`A_{${truncatedRank}} = \\sum_{i=1}^{${truncatedRank}} \\sigma_i u_i v_i^T`}
        </DisplayMath>
        
        <div className="space-y-2">
          <div className="text-sm font-medium">Reconstruction Error:</div>
          <DisplayMath>
            {`\\|A - A_{${truncatedRank}}\\|_F = ${
              svdResult.S.slice(truncatedRank).reduce((sum, s) => sum + s*s, 0).toFixed(3)
            }`}
          </DisplayMath>
        </div>
      </div>
      
      {/* Matrix Visualizations */}
      <div className="col-span-2 grid grid-cols-2 lg:grid-cols-4 gap-4">
        <MatrixDisplay 
          matrix={svdResult.originalMatrix} 
          title="Original A" 
          highlight={true}
        />
        
        <MatrixDisplay 
          matrix={svdResult.U} 
          title="U (Left Singular Vectors)"
        />
        
        <VectorDisplay 
          vector={svdResult.S} 
          title="Σ (Singular Values)"
        />
        
        <MatrixDisplay 
          matrix={svdResult.Vt} 
          title="Vᵀ (Right Singular Vectors)"
        />
      </div>
      
      {/* Reconstruction Comparison */}
      <div className="col-span-2 grid grid-cols-2 gap-4">
        <MatrixDisplay 
          matrix={svdResult.originalMatrix} 
          title="Original Matrix A"
        />
        
        <MatrixDisplay 
          matrix={svdResult.reconstructed} 
          title={`Rank-${truncatedRank} Approximation`}
          highlight={true}
        />
      </div>
      
      {/* Interactive Controls for Matrix Elements */}
      <div className="col-span-2 space-y-4">
        <h4 className="text-sm font-semibold">Edit Original Matrix:</h4>
        <div className="grid grid-cols-3 gap-2 max-w-xs">
          {data.map((row, i) => 
            row.map((val, j) => (
              <input
                key={`${i}-${j}`}
                type="number"
                value={val}
                onChange={(e) => {
                  const newData = [...data]
                  newData[i][j] = parseFloat(e.target.value) || 0
                  setData(newData)
                }}
                className="w-16 px-2 py-1 text-xs border border-border rounded bg-background"
                step="0.1"
              />
            ))
          )}
        </div>
      </div>
      
      <div className="col-span-2 text-xs text-muted-foreground">
        💡 Adjust the rank slider to see how SVD approximates the original matrix with fewer components. 
        Lower ranks give more compression but less accuracy.
      </div>
    </div>
  )
}
</file>

<file path="content/linear-algebra/index.mdx">
---
title: "Linear Algebra Fundamentals"
description: "Learn vectors, matrices, and linear transformations - the mathematical foundation of machine learning algorithms."
order: 1
estimatedTime: "45 minutes"
difficulty: "Beginner"
prerequisites: ["Basic algebra", "High school mathematics"]
learningObjectives:
  - "Understand vector spaces and operations"
  - "Master matrix multiplication and properties"
  - "Learn eigenvalues and eigenvectors"
  - "Apply linear transformations to data"
keywords: ["linear algebra", "vectors", "matrices", "eigenvalues", "machine learning"]
lastUpdated: "2025-01-07"
---

export const metadata = {
  title: frontmatter.title,
  description: frontmatter.description,
  keywords: frontmatter.keywords,
}

# Linear Algebra Fundamentals

Linear algebra forms the mathematical foundation of machine learning. At its core are vectors - mathematical objects that represent both magnitude and direction.

## Vectors and Vector Spaces

A vector is an ordered collection of numbers. In machine learning, we typically work with column vectors. For example, a 3-dimensional vector can be written as:

```
v = [v₁, v₂, v₃]ᵀ
```

Where `v₁`, `v₂`, and `v₃` are the components of the vector.

### Vector Operations

Several fundamental operations can be performed on vectors:

**Vector Addition:** When we add two vectors of the same dimension, we add their corresponding components:

```
a + b = [a₁ + b₁, a₂ + b₂, a₃ + b₃]ᵀ
```

**Scalar Multiplication:** Multiplying a vector by a scalar scales all components:

```
c · v = [c·v₁, c·v₂, c·v₃]ᵀ
```

**Dot Product:** The dot product of two vectors produces a scalar:

```
a · b = a₁b₁ + a₂b₂ + a₃b₃
```

## Matrix Operations

Matrices are rectangular arrays of numbers that can be thought of as collections of vectors. In machine learning, matrices represent datasets, transformations, and model parameters.

### Matrix Fundamentals

A matrix A with m rows and n columns is denoted as `A ∈ ℝᵐˣⁿ`. Each element is accessed using row and column indices: `A[i,j]` or `aᵢⱼ`.

### Matrix Multiplication

Matrix multiplication is fundamental to many machine learning algorithms. For matrices `A ∈ ℝᵐˣⁿ` and `B ∈ ℝⁿˣᵖ`, their product `C = AB` has dimensions `m × p`.

## Eigenvalues and Eigenvectors

Eigenvalues and eigenvectors reveal important properties of linear transformations and are essential for understanding dimensionality reduction techniques.

For a square matrix A, an eigenvector v and its corresponding eigenvalue λ satisfy:

```
Av = λv
```

This concept is crucial for Principal Component Analysis (PCA) and understanding data structure.

> **Note:** This is placeholder content. The actual mathematical content will be written separately with proper LaTeX rendering and interactive visualizations.
</file>

<file path="content/optimization/index.mdx">
---
title: "Optimization Theory"
description: "Mathematical optimization techniques including gradient descent and algorithms used to train machine learning models."
order: 5
estimatedTime: "55 minutes"
difficulty: "Advanced"
prerequisites: ["Calculus", "Linear algebra", "Vector operations"]
learningObjectives:
  - "Understand optimization fundamentals"
  - "Master gradient descent algorithms"
  - "Apply constrained optimization"
  - "Optimize machine learning models"
keywords: ["optimization", "gradient descent", "convex optimization", "machine learning", "algorithms"]
lastUpdated: "2025-01-07"
---

export const metadata = {
  title: frontmatter.title,
  description: frontmatter.description,
  keywords: frontmatter.keywords,
}

# Optimization Theory

Optimization is the mathematical discipline of finding the best solution from a set of available alternatives. In machine learning, optimization algorithms find model parameters that minimize a loss function.

## Optimization Fundamentals

An optimization problem seeks to minimize (or maximize) an **objective function** `f(x)` subject to constraints. In machine learning contexts:

- **Loss function:** Measures how well model predictions match actual data
- **Cost function:** Often includes regularization terms to prevent overfitting
- **Parameters:** `x` represents model weights and biases

### Common Loss Functions

**Mean Squared Error (Regression):**
```
L(θ) = (1/2m) Σᵢ (hθ(xⁱ) - yⁱ)²
```

**Cross-entropy Loss (Classification):**
```
L(θ) = -(1/m) Σᵢ [yⁱ log(hθ(xⁱ)) + (1-yⁱ) log(1-hθ(xⁱ))]
```

## Gradient Descent

Gradient descent is the most fundamental optimization algorithm in machine learning. It iteratively moves in the direction of steepest descent to find a function's minimum.

### Basic Gradient Descent

The gradient `∇f(x)` points in the direction of steepest increase. To minimize `f(x)`, we move in the opposite direction:

```
x_{t+1} = x_t - α∇f(x_t)
```

Where `α` is the **learning rate** that controls the step size.

### Stochastic Gradient Descent

**Batch Gradient Descent:** Uses entire dataset
```
θ_{t+1} = θ_t - α ∇_θ (1/m) Σᵢ L(hθ(xⁱ), yⁱ)
```

**Stochastic Gradient Descent:** Uses single example
```
θ_{t+1} = θ_t - α ∇_θ L(hθ(xⁱ), yⁱ)
```

**Mini-batch Gradient Descent:** Uses small batch of examples
```
θ_{t+1} = θ_t - α ∇_θ (1/|B|) Σᵢ∈B L(hθ(xⁱ), yⁱ)
```

## Advanced Optimizers

Modern optimization algorithms improve upon basic gradient descent:

**Momentum:** Accelerates gradients in consistent directions
```
v_t = βv_{t-1} + (1-β)∇f(x_t)
x_{t+1} = x_t - αv_t
```

**Adam:** Combines momentum and adaptive learning rates
```
m_t = β₁m_{t-1} + (1-β₁)∇f(x_t)
v_t = β₂v_{t-1} + (1-β₂)(∇f(x_t))²
x_{t+1} = x_t - α(m̂_t/√(v̂_t + ε))
```

## Constrained Optimization

Many optimization problems include constraints that limit the feasible solutions.

### Lagrange Multipliers

For problems with equality constraints, Lagrange multipliers convert constrained optimization into unconstrained optimization:

**Problem:** Minimize `f(x)` subject to `g(x) = 0`

**Lagrangian:**
```
L(x,λ) = f(x) + λg(x)
```

**Optimality Conditions:**
```
∇_x L(x,λ) = ∇f(x) + λ∇g(x) = 0
∇_λ L(x,λ) = g(x) = 0
```

> **Note:** This is placeholder content for demonstration. Full mathematical content with interactive visualizations will be added separately.
</file>

<file path="content/probability/index.mdx">
---
title: "Probability Theory"
description: "Learn probability fundamentals, random variables, and distributions essential for machine learning."
order: 3
estimatedTime: "50 minutes"
difficulty: "Beginner"
prerequisites: ["Basic calculus", "Set theory"]
learningObjectives:
  - "Understand probability fundamentals"
  - "Work with random variables and distributions"
  - "Apply Bayes' theorem"
  - "Model uncertainty in machine learning"
keywords: ["probability theory", "random variables", "distributions", "bayes theorem", "machine learning"]
lastUpdated: "2025-01-07"
---

export const metadata = {
  title: frontmatter.title,
  description: frontmatter.description,
  keywords: frontmatter.keywords,
}

# Probability Theory

Probability theory provides the mathematical framework for reasoning under uncertainty. In machine learning, we use probability to model uncertainty in data, make predictions, and quantify confidence in our results.

## Probability Fundamentals

A **sample space** Ω is the set of all possible outcomes of an experiment. An **event** is a subset of the sample space.

For example, when flipping a coin twice:
- Sample space: `Ω = {HH, HT, TH, TT}`
- Event "at least one head": `A = {HH, HT, TH}`

### Probability Rules

Probability assigns a number between 0 and 1 to each event. Key axioms include:

```
0 ≤ P(A) ≤ 1 for any event A
P(Ω) = 1 (certainty)
P(A ∪ B) = P(A) + P(B) - P(A ∩ B)
```

**Conditional Probability:** The probability of event A given that event B has occurred:

```
P(A|B) = P(A ∩ B) / P(B), provided P(B) > 0
```

## Probability Distributions

Probability distributions describe how probability is distributed over the possible values of a random variable.

### Discrete Distributions

**Bernoulli Distribution:** Models a single trial with success probability p:

```
P(X = k) = p^k × (1-p)^(1-k), k ∈ {0,1}
```

**Binomial Distribution:** Models the number of successes in n independent Bernoulli trials:

```
P(X = k) = C(n,k) × p^k × (1-p)^(n-k)
```

### Normal Distribution

The normal (Gaussian) distribution is the most important distribution in statistics and machine learning:

```
f(x) = (1/(σ√(2π))) × e^(-(x-μ)²/(2σ²))
```

## Bayes' Theorem

Bayes' theorem is fundamental to machine learning, providing a way to update our beliefs about hypotheses as we observe new evidence:

```
P(H|E) = P(E|H) × P(H) / P(E)
```

Where:
- `P(H|E)` is the posterior probability (updated belief)
- `P(E|H)` is the likelihood (how well hypothesis explains evidence)
- `P(H)` is the prior probability (initial belief)
- `P(E)` is the evidence (normalizing constant)

> **Note:** This is placeholder content for demonstration. Full mathematical content with interactive visualizations will be added separately.
</file>

<file path="content/statistics/index.mdx">
---
title: "Statistics for Machine Learning"
description: "Statistical methods, hypothesis testing, and inference techniques used in machine learning."
order: 4
estimatedTime: "35 minutes"
difficulty: "Intermediate"
prerequisites: ["Probability theory", "Basic calculus"]
learningObjectives:
  - "Perform statistical inference"
  - "Understand hypothesis testing"
  - "Apply statistical methods to data"
  - "Evaluate model performance statistically"
keywords: ["statistics", "hypothesis testing", "confidence intervals", "regression analysis", "machine learning"]
lastUpdated: "2025-01-07"
---

export const metadata = {
  title: frontmatter.title,
  description: frontmatter.description,
  keywords: frontmatter.keywords,
}

# Statistics for Machine Learning

Statistical methods provide the tools for making inferences about populations from samples, hypothesis testing, and evaluating the performance of machine learning models.

## Descriptive Statistics

Descriptive statistics summarize and describe the main features of a dataset.

**Measures of Central Tendency:**
- **Mean:** `μ = (1/n) Σᵢ xᵢ` - the average value
- **Median:** The middle value when data is ordered
- **Mode:** The most frequently occurring value

**Measures of Spread:**
- **Variance:** `σ² = (1/n) Σᵢ (xᵢ - μ)²`
- **Standard Deviation:** `σ = √(σ²)`
- **Range:** Maximum - Minimum

## Statistical Inference

Statistical inference allows us to make conclusions about a population based on a sample.

### Confidence Intervals

A confidence interval provides a range of plausible values for a population parameter. For a sample mean with known population standard deviation:

```
CI = x̄ ± z(α/2) × (σ/√n)
```

### Hypothesis Testing

Hypothesis testing is a statistical method for making decisions about population parameters based on sample data.

**The Process:**
1. State null hypothesis H₀ and alternative hypothesis H₁
2. Choose significance level α (typically 0.05)
3. Calculate test statistic
4. Determine p-value or compare with critical value
5. Make decision: reject or fail to reject H₀

**One-sample t-test:** Tests whether a sample mean differs from a hypothesized value:

```
t = (x̄ - μ₀) / (s/√n)
```

## Regression Analysis

Regression analysis is used to model the relationship between a dependent variable and one or more independent variables.

### Linear Regression

Linear regression models the relationship between variables using a linear equation:

```
y = β₀ + β₁x + ε
```

Where:
- `y` is the dependent variable
- `x` is the independent variable
- `β₀` is the y-intercept
- `β₁` is the slope
- `ε` is the error term

> **Note:** This is placeholder content for demonstration. Full mathematical content with interactive visualizations will be added separately.
</file>

<file path="lib/data/chapters.ts">
import { Chapter } from '@/types/content'

export const chapters: Chapter[] = [
  {
    id: 'linear-algebra',
    title: 'Linear Algebra',
    slug: 'linear-algebra',
    description: 'Vectors, matrices, and linear transformations. The mathematical foundation that underlies most machine learning algorithms.',
    icon: '📐',
    order: 1,
    readingTime: 45,
    difficulty: 'Beginner',
    prerequisites: ['Basic algebra', 'High school mathematics'],
    learningObjectives: [
      'Understand vector spaces and operations',
      'Master matrix multiplication and properties',
      'Learn eigenvalues and eigenvectors',
      'Apply linear transformations to data'
    ],
    sections: [
      {
        id: 'vectors',
        title: 'Vectors and Vector Spaces',
        slug: 'vectors',
        order: 1,
        estimatedTime: 15,
        subsections: [
          { id: 'vector-basics', title: 'Vector Basics', slug: 'vector-basics', order: 1 },
          { id: 'vector-operations', title: 'Vector Operations', slug: 'vector-operations', order: 2 },
          { id: 'vector-spaces', title: 'Vector Spaces', slug: 'vector-spaces', order: 3 }
        ]
      },
      {
        id: 'matrices',
        title: 'Matrix Operations',
        slug: 'matrices',
        order: 2,
        estimatedTime: 20,
        subsections: [
          { id: 'matrix-basics', title: 'Matrix Fundamentals', slug: 'matrix-basics', order: 1 },
          { id: 'matrix-multiplication', title: 'Matrix Multiplication', slug: 'matrix-multiplication', order: 2 },
          { id: 'matrix-inverse', title: 'Matrix Inverse', slug: 'matrix-inverse', order: 3 }
        ]
      },
      {
        id: 'eigenvalues',
        title: 'Eigenvalues and Eigenvectors',
        slug: 'eigenvalues',
        order: 3,
        estimatedTime: 10
      }
    ],
    published: true
  },
  {
    id: 'matrices',
    title: 'Advanced Matrix Theory',
    slug: 'matrices',
    description: 'Deep dive into matrix operations, decompositions, and their applications in machine learning algorithms.',
    icon: '🔢',
    order: 2,
    readingTime: 40,
    difficulty: 'Intermediate',
    prerequisites: ['Linear Algebra basics', 'Vector operations'],
    learningObjectives: [
      'Master advanced matrix operations',
      'Understand matrix decompositions (SVD, LU, QR)',
      'Apply matrix techniques to dimensionality reduction',
      'Solve systems of linear equations'
    ],
    sections: [
      {
        id: 'matrix-decomposition',
        title: 'Matrix Decomposition',
        slug: 'matrix-decomposition',
        order: 1,
        estimatedTime: 20,
        subsections: [
          { id: 'svd', title: 'Singular Value Decomposition', slug: 'svd', order: 1 },
          { id: 'lu-decomposition', title: 'LU Decomposition', slug: 'lu-decomposition', order: 2 },
          { id: 'qr-decomposition', title: 'QR Decomposition', slug: 'qr-decomposition', order: 3 }
        ]
      },
      {
        id: 'matrix-applications',
        title: 'Applications in ML',
        slug: 'matrix-applications',
        order: 2,
        estimatedTime: 20,
        subsections: [
          { id: 'pca', title: 'Principal Component Analysis', slug: 'pca', order: 1 },
          { id: 'linear-regression', title: 'Linear Regression', slug: 'linear-regression', order: 2 }
        ]
      }
    ],
    published: true
  },
  {
    id: 'probability',
    title: 'Probability Theory',
    slug: 'probability',
    description: 'Fundamental concepts of probability, random variables, and distributions essential for machine learning.',
    icon: '🎲',
    order: 3,
    readingTime: 50,
    difficulty: 'Beginner',
    prerequisites: ['Basic calculus', 'Set theory'],
    learningObjectives: [
      'Understand probability fundamentals',
      'Work with random variables and distributions',
      'Apply Bayes\' theorem',
      'Model uncertainty in machine learning'
    ],
    sections: [
      {
        id: 'probability-basics',
        title: 'Probability Fundamentals',
        slug: 'probability-basics',
        order: 1,
        estimatedTime: 15,
        subsections: [
          { id: 'sample-spaces', title: 'Sample Spaces and Events', slug: 'sample-spaces', order: 1 },
          { id: 'probability-rules', title: 'Probability Rules', slug: 'probability-rules', order: 2 }
        ]
      },
      {
        id: 'distributions',
        title: 'Probability Distributions',
        slug: 'distributions',
        order: 2,
        estimatedTime: 25,
        subsections: [
          { id: 'discrete-distributions', title: 'Discrete Distributions', slug: 'discrete-distributions', order: 1 },
          { id: 'continuous-distributions', title: 'Continuous Distributions', slug: 'continuous-distributions', order: 2 },
          { id: 'normal-distribution', title: 'Normal Distribution', slug: 'normal-distribution', order: 3 }
        ]
      },
      {
        id: 'bayes-theorem',
        title: 'Bayes\' Theorem',
        slug: 'bayes-theorem',
        order: 3,
        estimatedTime: 10
      }
    ],
    published: true
  },
  {
    id: 'statistics',
    title: 'Statistics for ML',
    slug: 'statistics',
    description: 'Statistical methods, hypothesis testing, and inference techniques used in machine learning.',
    icon: '📊',
    order: 4,
    readingTime: 35,
    difficulty: 'Intermediate',
    prerequisites: ['Probability theory', 'Basic calculus'],
    learningObjectives: [
      'Perform statistical inference',
      'Understand hypothesis testing',
      'Apply statistical methods to data',
      'Evaluate model performance statistically'
    ],
    sections: [
      {
        id: 'descriptive-stats',
        title: 'Descriptive Statistics',
        slug: 'descriptive-stats',
        order: 1,
        estimatedTime: 10
      },
      {
        id: 'inferential-stats',
        title: 'Statistical Inference',
        slug: 'inferential-stats',
        order: 2,
        estimatedTime: 15,
        subsections: [
          { id: 'confidence-intervals', title: 'Confidence Intervals', slug: 'confidence-intervals', order: 1 },
          { id: 'hypothesis-testing', title: 'Hypothesis Testing', slug: 'hypothesis-testing', order: 2 }
        ]
      },
      {
        id: 'regression-analysis',
        title: 'Regression Analysis',
        slug: 'regression-analysis',
        order: 3,
        estimatedTime: 10
      }
    ],
    published: true
  },
  {
    id: 'optimization',
    title: 'Optimization Theory',
    slug: 'optimization',
    description: 'Mathematical optimization techniques including gradient descent and algorithms used to train machine learning models.',
    icon: '📈',
    order: 5,
    readingTime: 55,
    difficulty: 'Advanced',
    prerequisites: ['Calculus', 'Linear algebra', 'Vector operations'],
    learningObjectives: [
      'Understand optimization fundamentals',
      'Master gradient descent algorithms',
      'Apply constrained optimization',
      'Optimize machine learning models'
    ],
    sections: [
      {
        id: 'optimization-basics',
        title: 'Optimization Fundamentals',
        slug: 'optimization-basics',
        order: 1,
        estimatedTime: 15,
        subsections: [
          { id: 'objective-functions', title: 'Objective Functions', slug: 'objective-functions', order: 1 },
          { id: 'convex-optimization', title: 'Convex Optimization', slug: 'convex-optimization', order: 2 }
        ]
      },
      {
        id: 'gradient-descent',
        title: 'Gradient Descent',
        slug: 'gradient-descent',
        order: 2,
        estimatedTime: 25,
        subsections: [
          { id: 'basic-gradient-descent', title: 'Basic Gradient Descent', slug: 'basic-gradient-descent', order: 1 },
          { id: 'stochastic-gd', title: 'Stochastic Gradient Descent', slug: 'stochastic-gd', order: 2 },
          { id: 'advanced-optimizers', title: 'Advanced Optimizers', slug: 'advanced-optimizers', order: 3 }
        ]
      },
      {
        id: 'constrained-optimization',
        title: 'Constrained Optimization',
        slug: 'constrained-optimization',
        order: 3,
        estimatedTime: 15,
        subsections: [
          { id: 'lagrange-multipliers', title: 'Lagrange Multipliers', slug: 'lagrange-multipliers', order: 1 },
          { id: 'kkt-conditions', title: 'KKT Conditions', slug: 'kkt-conditions', order: 2 }
        ]
      }
    ],
    published: true
  }
]

export const getChapterBySlug = (slug: string): Chapter | undefined => {
  return chapters.find(chapter => chapter.slug === slug)
}

export const getChapterById = (id: string): Chapter | undefined => {
  return chapters.find(chapter => chapter.id === id)
}

export const getPublishedChapters = (): Chapter[] => {
  return chapters.filter(chapter => chapter.published).sort((a, b) => a.order - b.order)
}
</file>

<file path="lib/hooks/useTheme.ts">
// Re-export the useTheme hook from ThemeProvider for convenience
export { useTheme } from '@/components/providers/ThemeProvider'

// Type definitions for theme system
export type Theme = 'light' | 'dark'

export interface ThemeContextValue {
  theme: Theme
  toggleTheme: () => void
}

export interface ThemeProviderProps {
  children: React.ReactNode
}
</file>

<file path="lib/utils/cn.ts">
import { type ClassValue, clsx } from 'clsx'

export function cn(...inputs: ClassValue[]) {
  return clsx(inputs)
}
</file>

<file path="lib/utils/contentLoader.ts">
import { ChapterFrontmatter, ContentMetadata } from '@/types/frontmatter'

/**
 * Parse reading time from estimated time string
 */
export function parseReadingTime(estimatedTime: string): number {
  const match = estimatedTime.match(/(\d+)/)
  return match ? parseInt(match[1], 10) : 0
}

/**
 * Convert frontmatter to content metadata
 */
export function frontmatterToMetadata(frontmatter: ChapterFrontmatter): ContentMetadata {
  return {
    title: frontmatter.title,
    description: frontmatter.description,
    slug: frontmatter.slug || '',
    order: frontmatter.order,
    estimatedTime: frontmatter.estimatedTime,
    difficulty: frontmatter.difficulty,
    prerequisites: frontmatter.prerequisites,
    learningObjectives: frontmatter.learningObjectives,
    lastUpdated: frontmatter.lastUpdated
  }
}

/**
 * Validate required frontmatter fields
 */
export function validateFrontmatter(frontmatter: Partial<ChapterFrontmatter>): ChapterFrontmatter {
  const required = ['title', 'description', 'order', 'estimatedTime', 'difficulty', 'prerequisites', 'learningObjectives']
  
  for (const field of required) {
    if (!(field in frontmatter) || frontmatter[field as keyof ChapterFrontmatter] === undefined) {
      throw new Error(`Missing required frontmatter field: ${field}`)
    }
  }
  
  return frontmatter as ChapterFrontmatter
}

/**
 * Calculate word count from content string
 */
export function calculateWordCount(content: string): number {
  return content
    .replace(/[^\w\s]/g, '')
    .split(/\s+/)
    .filter(word => word.length > 0)
    .length
}

/**
 * Estimate reading time based on word count
 */
export function estimateReadingTime(wordCount: number, wordsPerMinute: number = 200): number {
  return Math.ceil(wordCount / wordsPerMinute)
}

/**
 * Generate excerpt from content
 */
export function generateExcerpt(content: string, maxLength: number = 160): string {
  const plainText = content
    .replace(/[#*`]/g, '') // Remove markdown formatting
    .replace(/\n/g, ' ')   // Replace newlines with spaces
    .trim()
  
  if (plainText.length <= maxLength) {
    return plainText
  }
  
  return plainText.slice(0, maxLength).replace(/\s+\S*$/, '') + '...'
}

/**
 * Slugify text for URLs
 */
export function slugify(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/--+/g, '-')
    .trim()
}

/**
 * Format date for display
 */
export function formatDate(dateString: string): string {
  try {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  } catch {
    return dateString
  }
}

/**
 * Error handling for content loading
 */
export class ContentLoadError extends Error {
  constructor(
    message: string,
    public readonly contentPath: string,
    public readonly originalError?: Error
  ) {
    super(message)
    this.name = 'ContentLoadError'
  }
}

/**
 * Safe content loader with error handling
 */
export async function safeLoadContent<T>(
  loader: () => Promise<T>,
  contentPath: string
): Promise<T> {
  try {
    return await loader()
  } catch (error) {
    throw new ContentLoadError(
      `Failed to load content from ${contentPath}`,
      contentPath,
      error instanceof Error ? error : new Error(String(error))
    )
  }
}
</file>

<file path="lib/utils/loadMDX.ts">
import { ChapterFrontmatter, MDXMetadata } from '@/types/frontmatter'
import { ContentLoadError, safeLoadContent } from './contentLoader'

/**
 * Dynamically import MDX content
 */
export async function loadMDXContent(chapterSlug: string): Promise<MDXMetadata> {
  return safeLoadContent(async () => {
    let content: any
    let frontmatter: ChapterFrontmatter
    
    try {
      // Dynamic import based on chapter slug
      switch (chapterSlug) {
        case 'linear-algebra':
          content = await import('@/content/linear-algebra/index.mdx')
          break
        case 'matrices':
          content = await import('@/content/matrices/index.mdx')
          break
        case 'probability':
          content = await import('@/content/probability/index.mdx')
          break
        case 'statistics':
          content = await import('@/content/statistics/index.mdx')
          break
        case 'optimization':
          content = await import('@/content/optimization/index.mdx')
          break
        default:
          throw new Error(`Unknown chapter: ${chapterSlug}`)
      }

      // Extract frontmatter from the MDX module
      frontmatter = content.frontmatter || {}
      
      // Validate required frontmatter fields
      if (!frontmatter.title || !frontmatter.description) {
        throw new Error('Missing required frontmatter fields: title and description')
      }

      return {
        frontmatter,
        content: content.default,
      }
    } catch (error) {
      throw new Error(`Failed to load MDX content for ${chapterSlug}: ${error}`)
    }
  }, `content/${chapterSlug}/index.mdx`)
}

/**
 * Get all available chapter slugs
 */
export function getAvailableChapters(): string[] {
  return [
    'linear-algebra',
    'matrices', 
    'probability',
    'statistics',
    'optimization'
  ]
}

/**
 * Check if chapter exists
 */
export function isValidChapter(slug: string): boolean {
  return getAvailableChapters().includes(slug)
}

/**
 * Get chapter order for navigation
 */
export function getChapterOrder(slug: string): number {
  const order = {
    'linear-algebra': 1,
    'matrices': 2,
    'probability': 3,
    'statistics': 4,
    'optimization': 5
  }
  return order[slug as keyof typeof order] || 0
}

/**
 * Get next chapter slug
 */
export function getNextChapter(currentSlug: string): string | null {
  const chapters = getAvailableChapters()
  const currentIndex = chapters.indexOf(currentSlug)
  
  if (currentIndex === -1 || currentIndex === chapters.length - 1) {
    return null
  }
  
  return chapters[currentIndex + 1]
}

/**
 * Get previous chapter slug
 */
export function getPreviousChapter(currentSlug: string): string | null {
  const chapters = getAvailableChapters()
  const currentIndex = chapters.indexOf(currentSlug)
  
  if (currentIndex <= 0) {
    return null
  }
  
  return chapters[currentIndex - 1]
}
</file>

<file path="lib/utils/navigation.ts">
import { Chapter, ChapterNavigation, TableOfContentsItem } from '@/types/content'
import { chapters, getChapterBySlug } from '@/lib/data/chapters'

/**
 * Get navigation information for a chapter (previous and next chapters)
 */
export function getChapterNavigation(currentSlug: string): ChapterNavigation | null {
  const publishedChapters = chapters
    .filter(chapter => chapter.published)
    .sort((a, b) => a.order - b.order)
  
  const currentIndex = publishedChapters.findIndex(chapter => chapter.slug === currentSlug)
  
  if (currentIndex === -1) {
    return null
  }
  
  const current = publishedChapters[currentIndex]
  const previous = currentIndex > 0 ? publishedChapters[currentIndex - 1] : undefined
  const next = currentIndex < publishedChapters.length - 1 ? publishedChapters[currentIndex + 1] : undefined
  
  return {
    current,
    previous,
    next
  }
}

/**
 * Get the next chapter in the sequence
 */
export function getNextChapter(currentSlug: string): Chapter | null {
  const navigation = getChapterNavigation(currentSlug)
  return navigation?.next || null
}

/**
 * Get the previous chapter in the sequence
 */
export function getPreviousChapter(currentSlug: string): Chapter | null {
  const navigation = getChapterNavigation(currentSlug)
  return navigation?.previous || null
}

/**
 * Generate breadcrumb navigation for a chapter
 */
export function generateBreadcrumbs(chapterSlug: string, sectionSlug?: string): Array<{title: string, href: string}> {
  const breadcrumbs = [
    { title: 'Home', href: '/' }
  ]
  
  const chapter = getChapterBySlug(chapterSlug)
  if (!chapter) return breadcrumbs
  
  breadcrumbs.push({
    title: chapter.title,
    href: `/${chapter.slug}`
  })
  
  if (sectionSlug) {
    const section = chapter.sections.find(s => s.slug === sectionSlug)
    if (section) {
      breadcrumbs.push({
        title: section.title,
        href: `/${chapter.slug}#${section.slug}`
      })
    }
  }
  
  return breadcrumbs
}

/**
 * Generate table of contents for a chapter
 */
export function generateTableOfContents(chapter: Chapter): TableOfContentsItem[] {
  return chapter.sections.map(section => ({
    id: section.id,
    title: section.title,
    slug: section.slug,
    level: 1,
    children: section.subsections?.map(subsection => ({
      id: subsection.id,
      title: subsection.title,
      slug: subsection.slug,
      level: 2
    }))
  }))
}

/**
 * Calculate total reading time for a chapter
 */
export function calculateChapterReadingTime(chapter: Chapter): number {
  return chapter.sections.reduce((total, section) => {
    const sectionTime = section.estimatedTime || 0
    const subsectionTime = section.subsections?.reduce((subTotal, subsection) => {
      return subTotal + (subsection.estimatedTime || 0)
    }, 0) || 0
    
    return total + sectionTime + subsectionTime
  }, 0)
}

/**
 * Get chapter progress percentage
 */
export function getChapterProgress(chapterSlug: string, completedSections: string[] = []): number {
  const chapter = getChapterBySlug(chapterSlug)
  if (!chapter) return 0
  
  const totalSections = chapter.sections.length
  const completedCount = chapter.sections.filter(section => 
    completedSections.includes(section.id)
  ).length
  
  return totalSections > 0 ? Math.round((completedCount / totalSections) * 100) : 0
}

/**
 * Get all chapter URLs for sitemap generation
 */
export function getAllChapterUrls(): string[] {
  return chapters
    .filter(chapter => chapter.published)
    .map(chapter => `/${chapter.slug}`)
}

/**
 * Check if a chapter exists and is published
 */
export function isValidChapterSlug(slug: string): boolean {
  const chapter = getChapterBySlug(slug)
  return chapter ? chapter.published : false
}

/**
 * Get chapter difficulty color class
 */
export function getDifficultyColor(difficulty: string): string {
  switch (difficulty.toLowerCase()) {
    case 'beginner':
      return 'text-green-600 bg-green-50 border-green-200'
    case 'intermediate':
      return 'text-yellow-600 bg-yellow-50 border-yellow-200'
    case 'advanced':
      return 'text-red-600 bg-red-50 border-red-200'
    default:
      return 'text-gray-600 bg-gray-50 border-gray-200'
  }
}

/**
 * Format reading time for display
 */
export function formatReadingTime(minutes: number): string {
  if (minutes < 60) {
    return `${minutes} min read`
  }
  
  const hours = Math.floor(minutes / 60)
  const remainingMinutes = minutes % 60
  
  if (remainingMinutes === 0) {
    return `${hours} hr read`
  }
  
  return `${hours}h ${remainingMinutes}m read`
}
</file>

<file path="lib/utils/typography.ts">
import React from 'react'
import { cn } from './cn'

// Typography utility functions for consistent text styling

interface TypographyProps {
  className?: string
  children: React.ReactNode
}

// Heading components with proper hierarchy
export function H1({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('h1', {
    className: cn(
      'text-3xl sm:text-4xl lg:text-5xl font-bold tracking-tight text-foreground mb-6',
      'leading-tight',
      className
    )
  }, children)
}

export function H2({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('h2', {
    className: cn(
      'text-2xl sm:text-3xl lg:text-4xl font-semibold tracking-tight text-foreground mb-4',
      'leading-tight mt-12 first:mt-0',
      className
    )
  }, children)
}

export function H3({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('h3', {
    className: cn(
      'text-xl sm:text-2xl lg:text-3xl font-semibold text-foreground mb-3',
      'leading-snug mt-8 first:mt-0',
      className
    )
  }, children)
}

export function H4({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('h4', {
    className: cn(
      'text-lg sm:text-xl font-semibold text-foreground mb-2',
      'leading-snug mt-6 first:mt-0',
      className
    )
  }, children)
}

export function H5({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('h5', {
    className: cn(
      'text-base sm:text-lg font-medium text-foreground mb-2',
      'leading-normal mt-4 first:mt-0',
      className
    )
  }, children)
}

export function H6({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('h6', {
    className: cn(
      'text-sm sm:text-base font-medium text-foreground mb-1',
      'leading-normal mt-4 first:mt-0',
      className
    )
  }, children)
}

// Paragraph and text components
export function P({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('p', {
    className: cn(
      'text-base sm:text-lg text-foreground leading-relaxed mb-4',
      'max-w-none',
      className
    )
  }, children)
}

export function Lead({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('p', {
    className: cn(
      'text-lg sm:text-xl text-muted-foreground leading-relaxed mb-6',
      'font-light',
      className
    )
  }, children)
}

export function Small({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('small', {
    className: cn(
      'text-sm text-muted-foreground leading-normal',
      className
    )
  }, children)
}

export function Muted({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('p', {
    className: cn(
      'text-sm text-muted-foreground leading-normal',
      className
    )
  }, children)
}

// Mathematical content specific typography
export function MathBlock({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('div', {
    className: cn(
      'my-6 p-4 bg-muted rounded-lg overflow-x-auto',
      'text-center font-mono text-foreground',
      'border border-border',
      className
    )
  }, children)
}

export function InlineMath({ className, children }: TypographyProps): React.ReactElement {
  return React.createElement('span', {
    className: cn(
      'font-mono bg-muted px-1 py-0.5 rounded text-foreground',
      'text-sm',
      className
    )
  }, children)
}

// Utility classes as CSS-in-JS
export const typographyClasses = {
  // Headings
  h1: 'text-3xl sm:text-4xl lg:text-5xl font-bold tracking-tight text-foreground mb-6 leading-tight',
  h2: 'text-2xl sm:text-3xl lg:text-4xl font-semibold tracking-tight text-foreground mb-4 leading-tight mt-12 first:mt-0',
  h3: 'text-xl sm:text-2xl lg:text-3xl font-semibold text-foreground mb-3 leading-snug mt-8 first:mt-0',
  h4: 'text-lg sm:text-xl font-semibold text-foreground mb-2 leading-snug mt-6 first:mt-0',
  h5: 'text-base sm:text-lg font-medium text-foreground mb-2 leading-normal mt-4 first:mt-0',
  h6: 'text-sm sm:text-base font-medium text-foreground mb-1 leading-normal mt-4 first:mt-0',
  
  // Body text
  p: 'text-base sm:text-lg text-foreground leading-relaxed mb-4 max-w-none',
  lead: 'text-lg sm:text-xl text-muted-foreground leading-relaxed mb-6 font-light',
  small: 'text-sm text-muted-foreground leading-normal',
  muted: 'text-sm text-muted-foreground leading-normal',
  
  // Mathematical content
  mathBlock: 'my-6 p-4 bg-muted rounded-lg overflow-x-auto text-center font-mono text-foreground border border-border',
  inlineMath: 'font-mono bg-muted px-1 py-0.5 rounded text-foreground text-sm'
}
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Pramod Goyal

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="mdx-components.tsx">
import type { MDXComponents } from 'mdx/types'
import { P, MathBlock, InlineMath } from '@/lib/utils/typography'
import { MDXHeading } from '@/components/content/MDXComponents'
import Link from 'next/link'
import Image from 'next/image'

export function useMDXComponents(components: MDXComponents): MDXComponents {
  return {
    // Headings with proper hierarchy and styling + ToC integration
    h1: ({ children, ...props }) => <MDXHeading level={1} {...props}>{children}</MDXHeading>,
    h2: ({ children, ...props }) => <MDXHeading level={2} {...props}>{children}</MDXHeading>,
    h3: ({ children, ...props }) => <MDXHeading level={3} {...props}>{children}</MDXHeading>,
    h4: ({ children, ...props }) => <MDXHeading level={4} {...props}>{children}</MDXHeading>,
    h5: ({ children, ...props }) => <MDXHeading level={5} {...props}>{children}</MDXHeading>,
    h6: ({ children, ...props }) => <MDXHeading level={6} {...props}>{children}</MDXHeading>,
    
    // Paragraphs with proper typography
    p: ({ children, ...props }) => <P {...props}>{children}</P>,
    
    // Links with Next.js optimization
    a: ({ href, children, ...props }) => {
      if (href?.startsWith('/')) {
        return (
          <Link href={href} {...props}>
            {children}
          </Link>
        )
      }
      return (
        <a 
          href={href} 
          target={href?.startsWith('http') ? '_blank' : undefined}
          rel={href?.startsWith('http') ? 'noopener noreferrer' : undefined}
          {...props}
        >
          {children}
        </a>
      )
    },
    
    // Images with Next.js optimization
    img: ({ src, alt, ...props }) => (
      <Image
        src={src || ''}
        alt={alt || ''}
        width={800}
        height={400}
        className="rounded-lg border border-border my-6"
        {...props}
      />
    ),
    
    // Lists with proper styling
    ul: ({ children, ...props }) => (
      <ul className="list-disc pl-6 mb-4 space-y-1" {...props}>
        {children}
      </ul>
    ),
    ol: ({ children, ...props }) => (
      <ol className="list-decimal pl-6 mb-4 space-y-1" {...props}>
        {children}
      </ol>
    ),
    li: ({ children, ...props }) => (
      <li className="text-foreground leading-relaxed" {...props}>
        {children}
      </li>
    ),
    
    // Code blocks and inline code
    code: ({ children, className, ...props }) => {
      const isInline = !className
      if (isInline) {
        return <InlineMath {...props}>{children}</InlineMath>
      }
      return (
        <code 
          className="block p-4 bg-muted rounded-lg border border-border overflow-x-auto font-mono text-sm"
          {...props}
        >
          {children}
        </code>
      )
    },
    
    pre: ({ children, ...props }) => (
      <MathBlock {...props}>
        {children}
      </MathBlock>
    ),
    
    // Blockquotes
    blockquote: ({ children, ...props }) => (
      <blockquote 
        className="border-l-4 border-border pl-4 italic text-muted-foreground my-6"
        {...props}
      >
        {children}
      </blockquote>
    ),
    
    // Tables
    table: ({ children, ...props }) => (
      <div className="overflow-x-auto my-6">
        <table 
          className="w-full border-collapse border border-border"
          {...props}
        >
          {children}
        </table>
      </div>
    ),
    th: ({ children, ...props }) => (
      <th 
        className="border border-border px-4 py-2 bg-muted font-semibold text-left"
        {...props}
      >
        {children}
      </th>
    ),
    td: ({ children, ...props }) => (
      <td 
        className="border border-border px-4 py-2"
        {...props}
      >
        {children}
      </td>
    ),
    
    // Horizontal rule
    hr: (props) => (
      <hr className="border-0 border-t border-border my-8" {...props} />
    ),
    
    // Allow component overrides
    ...components,
  }
}
</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"],
      "@/components/*": ["components/*"],
      "@/lib/*": ["lib/*"],
      "@/types/*": ["types/*"],
      "@/styles/*": ["styles/*"]
    },
    "target": "ES2017",
    "forceConsistentCasingInFileNames": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="types/content.ts">
export interface Chapter {
  id: string
  title: string
  slug: string
  description: string
  icon: string
  order: number
  readingTime: number // in minutes
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced'
  prerequisites: string[]
  learningObjectives: string[]
  sections: Section[]
  published: boolean
}

export interface Section {
  id: string
  title: string
  slug: string
  order: number
  subsections?: Subsection[]
  estimatedTime?: number // in minutes
}

export interface Subsection {
  id: string
  title: string
  slug: string
  order: number
  estimatedTime?: number // in minutes
}

export interface ChapterNavigation {
  current: Chapter
  previous?: Chapter
  next?: Chapter
}

export interface TableOfContentsItem {
  id: string
  title: string
  slug: string
  level: number // 1 for sections, 2 for subsections
  isActive?: boolean
  children?: TableOfContentsItem[]
}

export interface ChapterMetadata {
  title: string
  description: string
  keywords: string[]
  estimatedReadingTime: number
  lastUpdated: string
  difficulty: string
  prerequisites: string[]
}

export interface BookProgress {
  chaptersCompleted: string[]
  currentChapter?: string
  totalProgress: number // percentage
  lastAccessed: string
}
</file>

<file path="types/frontmatter.ts">
export interface ChapterFrontmatter {
  title: string
  description: string
  order: number
  estimatedTime: string
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced'
  prerequisites: string[]
  learningObjectives: string[]
  keywords?: string[]
  lastUpdated?: string
  author?: string
  slug?: string
}

export interface SectionFrontmatter {
  title: string
  order: number
  estimatedTime?: string
  description?: string
}

export interface MDXMetadata {
  frontmatter: ChapterFrontmatter
  content: React.ComponentType
  readingTime?: number
  wordCount?: number
}

export interface ContentMetadata {
  title: string
  description: string
  slug: string
  order: number
  estimatedTime: string
  difficulty: string
  prerequisites: string[]
  learningObjectives: string[]
  lastUpdated?: string
}
</file>

<file path="types/theme.ts">
export type Theme = 'light' | 'dark'

export interface ThemeContextValue {
  theme: Theme
  toggleTheme: () => void
}

export interface ThemeProviderProps {
  children: React.ReactNode
}

export interface ThemeToggleProps {
  className?: string
}
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.*
!.env.example

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Sveltekit cache directory
.svelte-kit/

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# Firebase cache directory
.firebase/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v3
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# Vite logs files
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

package-lock.json
</file>

<file path="app/linear-algebra/page.tsx">
import type { Metadata } from 'next'
import { ChapterLayout } from '@/components/layout/ChapterLayout'
import { getChapterBySlug } from '@/lib/data/chapters'
import { getChapterNavigation } from '@/lib/utils/navigation'
import { notFound } from 'next/navigation'
import { SafeMDXContent } from '@/components/content/MDXContent'
import LinearAlgebraContent from '@/content/linear-algebra/index.mdx'

export const metadata: Metadata = {
  title: 'Linear Algebra | Interactive ML Mathematics',
  description: 'Learn vectors, matrices, and linear transformations - the mathematical foundation of machine learning algorithms.',
  keywords: ['linear algebra', 'vectors', 'matrices', 'eigenvalues', 'machine learning', 'mathematics'],
}

export default function LinearAlgebraPage() {
  const chapter = getChapterBySlug('linear-algebra')
  
  if (!chapter) {
    notFound()
  }
  
  const navigation = getChapterNavigation('linear-algebra')
  
  return (
    <ChapterLayout
      chapter={chapter}
      previousChapter={navigation?.previous}
      nextChapter={navigation?.next}
    >
      <SafeMDXContent>
        <LinearAlgebraContent />
      </SafeMDXContent>
    </ChapterLayout>
  )
}
</file>

<file path="app/matrices/page.tsx">
import type { Metadata } from 'next'
import { ChapterLayout } from '@/components/layout/ChapterLayout'
import { getChapterBySlug } from '@/lib/data/chapters'
import { getChapterNavigation } from '@/lib/utils/navigation'
import { notFound } from 'next/navigation'
import { SafeMDXContent } from '@/components/content/MDXContent'
import MatricesContent from '@/content/matrices/index.mdx'

export const metadata: Metadata = {
  title: 'Advanced Matrix Theory | Interactive ML Mathematics',
  description: 'Deep dive into matrix decompositions, transformations, and their applications in machine learning algorithms.',
  keywords: ['matrix theory', 'SVD', 'matrix decomposition', 'PCA', 'machine learning', 'linear algebra'],
}

export default function MatricesPage() {
  const chapter = getChapterBySlug('matrices')
  
  if (!chapter) {
    notFound()
  }
  
  const navigation = getChapterNavigation('matrices')
  
  return (
    <ChapterLayout
      chapter={chapter}
      previousChapter={navigation?.previous}
      nextChapter={navigation?.next}
    >
      <SafeMDXContent>
        <MatricesContent />
      </SafeMDXContent>
    </ChapterLayout>
  )
}
</file>

<file path="app/optimization/page.tsx">
import type { Metadata } from 'next'
import { ChapterLayout } from '@/components/layout/ChapterLayout'
import { getChapterBySlug } from '@/lib/data/chapters'
import { getChapterNavigation } from '@/lib/utils/navigation'
import { notFound } from 'next/navigation'
import { SafeMDXContent } from '@/components/content/MDXContent'
import OptimizationContent from '@/content/optimization/index.mdx'

export const metadata = {
  title: 'Optimization Theory | Interactive ML Mathematics',
  description: 'Mathematical optimization techniques including gradient descent and algorithms used to train machine learning models.',
  keywords: ['optimization', 'gradient descent', 'convex optimization', 'machine learning', 'algorithms'],
}

export default function OptimizationPage() {
  const chapter = getChapterBySlug('optimization')
  
  if (!chapter) {
    notFound()
  }
  
  const navigation = getChapterNavigation('optimization')
  
  return (
    <ChapterLayout
      chapter={chapter}
      previousChapter={navigation?.previous}
      nextChapter={navigation?.next}
    >
      <SafeMDXContent>
        <OptimizationContent />
      </SafeMDXContent>
    </ChapterLayout>
  )
}
</file>

<file path="app/probability/page.tsx">
import type { Metadata } from 'next'
import { ChapterLayout } from '@/components/layout/ChapterLayout'
import { getChapterBySlug } from '@/lib/data/chapters'
import { getChapterNavigation } from '@/lib/utils/navigation'
import { notFound } from 'next/navigation'
import { SafeMDXContent } from '@/components/content/MDXContent'
import ProbabilityContent from '@/content/probability/index.mdx'

export const metadata: Metadata = {
  title: 'Probability Theory | Interactive ML Mathematics',
  description: 'Learn probability fundamentals, random variables, and distributions essential for machine learning.',
  keywords: ['probability theory', 'random variables', 'distributions', 'bayes theorem', 'machine learning'],
}

export default function ProbabilityPage() {
  const chapter = getChapterBySlug('probability')
  
  if (!chapter) {
    notFound()
  }
  
  const navigation = getChapterNavigation('probability')
  
  return (
    <ChapterLayout
      chapter={chapter}
      previousChapter={navigation?.previous}
      nextChapter={navigation?.next}
    >
      <SafeMDXContent>
        <ProbabilityContent />
      </SafeMDXContent>
    </ChapterLayout>
  )
}
</file>

<file path="app/statistics/page.tsx">
import type { Metadata } from 'next'
import { ChapterLayout } from '@/components/layout/ChapterLayout'
import { getChapterBySlug } from '@/lib/data/chapters'
import { getChapterNavigation } from '@/lib/utils/navigation'
import { notFound } from 'next/navigation'
import { SafeMDXContent } from '@/components/content/MDXContent'
import StatisticsContent from '@/content/statistics/index.mdx'

export const metadata: Metadata = {
  title: 'Statistics for ML | Interactive ML Mathematics',
  description: 'Statistical methods, hypothesis testing, and inference techniques used in machine learning.',
  keywords: ['statistics', 'hypothesis testing', 'confidence intervals', 'regression analysis', 'machine learning'],
}

export default function StatisticsPage() {
  const chapter = getChapterBySlug('statistics')
  
  if (!chapter) {
    notFound()
  }
  
  const navigation = getChapterNavigation('statistics')
  
  return (
    <ChapterLayout
      chapter={chapter}
      previousChapter={navigation?.previous}
      nextChapter={navigation?.next}
    >
      <SafeMDXContent>
        <StatisticsContent />
      </SafeMDXContent>
    </ChapterLayout>
  )
}
</file>

<file path="components/content/MDXContent.tsx">
'use client'

import React from 'react'
import { cn } from '@/lib/utils/cn'

interface MDXContentProps {
  children: React.ReactNode
  className?: string
}

export function MDXContent({ children, className }: MDXContentProps) {
  return (
    <div className={cn('mdx-content', className)}>
      <div className="prose prose-lg max-w-none">
        {children}
      </div>
    </div>
  )
}

// Convert class component to functional component with error boundary hook
interface MDXErrorBoundaryState {
  hasError: boolean
  error?: Error
}

function useErrorBoundary() {
  const [state, setState] = React.useState<MDXErrorBoundaryState>({ hasError: false })

  const resetError = () => setState({ hasError: false })

  React.useEffect(() => {
    const handleError = (error: ErrorEvent) => {
      setState({ hasError: true, error: error.error })
    }

    window.addEventListener('error', handleError)
    return () => window.removeEventListener('error', handleError)
  }, [])

  return { ...state, resetError }
}

export function MDXErrorBoundary({ children }: { children: React.ReactNode }) {
  const { hasError, error, resetError } = useErrorBoundary()

  if (hasError) {
    return (
      <div className="my-8 p-6 border border-red-200 bg-red-50 rounded-lg">
        <h3 className="text-lg font-semibold text-red-900 mb-2">
          Content Loading Error
        </h3>
        <p className="text-red-700 mb-4">
          There was an error loading this content. Please try refreshing the page.
        </p>
        <button
          onClick={resetError}
          className="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors"
        >
          Try Again
        </button>
        {process.env.NODE_ENV === 'development' && error && (
          <details className="text-sm text-red-600 mt-4">
            <summary className="font-medium cursor-pointer">
              Error Details (Development)
            </summary>
            <pre className="mt-2 p-2 bg-red-100 rounded text-xs overflow-x-auto">
              {error.message}
              {error.stack}
            </pre>
          </details>
        )}
      </div>
    )
  }

  return <>{children}</>
}

// Wrapper that combines content and error boundary
export function SafeMDXContent({ children, className }: MDXContentProps) {
  return (
    <MDXErrorBoundary>
      <MDXContent className={className}>
        {children}
      </MDXContent>
    </MDXErrorBoundary>
  )
}
</file>

<file path="components/layout/ClientLayout.tsx">
'use client'

import { ThemeProvider } from '@/components/providers/ThemeProvider'
import { Layout } from '@/components/layout/Layout'

interface ClientLayoutProps {
  children: React.ReactNode
}

export function ClientLayout({ children }: ClientLayoutProps) {
  return (
    <ThemeProvider>
      <Layout>
        {children}
      </Layout>
    </ThemeProvider>
  )
}
</file>

<file path="components/ui/ThemeToggle.tsx">
'use client'

import { useTheme } from '@/components/providers/ThemeProvider'
import { useState, useEffect } from 'react'

export function ThemeToggle() {
  const [mounted, setMounted] = useState(false)
  
  useEffect(() => {
    setMounted(true)
  }, [])
  
  // Don't render until mounted on client
  if (!mounted) {
    return (
      <button
        className="p-2 rounded-lg border border-gray-300 bg-white hover:bg-gray-100 transition-colors"
        disabled
        aria-label="Loading theme toggle"
        type="button"
      >
        <div className="h-5 w-5 animate-pulse bg-gray-300 rounded" />
      </button>
    )
  }
  
  return <MountedThemeToggle />
}

function MountedThemeToggle() {
  const { theme, toggleTheme } = useTheme()
  
  return (
    <button
      onClick={toggleTheme}
      className="p-2 rounded-lg border border-border bg-background hover:bg-accent transition-colors focus:outline-none focus:ring-2 focus:ring-foreground focus:ring-offset-2 focus:ring-offset-background"
      aria-label={`Switch to ${theme === 'light' ? 'dark' : 'light'} mode`}
      type="button"
    >
      {theme === 'light' ? (
        <MoonIcon className="h-5 w-5" />
      ) : (
        <SunIcon className="h-5 w-5" />
      )}
    </button>
  )
}

function SunIcon({ className }: { className?: string }) {
  return (
    <svg
      className={className}
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="12" cy="12" r="5" />
      <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42" />
    </svg>
  )
}

function MoonIcon({ className }: { className?: string }) {
  return (
    <svg
      className={className}
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />
    </svg>
  )
}
</file>

<file path="content/matrices/index.mdx">
---
title: "Advanced Matrix Theory"
description: "Deep dive into matrix decompositions, transformations, and their applications in machine learning algorithms."
order: 2
estimatedTime: "40 minutes"
difficulty: "Intermediate"
prerequisites: ["Linear Algebra basics", "Vector operations"]
learningObjectives:
  - "Master advanced matrix operations"
  - "Understand matrix decompositions (SVD, LU, QR)"
  - "Apply matrix techniques to dimensionality reduction"
  - "Solve systems of linear equations"
keywords: ["matrix theory", "SVD", "matrix decomposition", "PCA", "machine learning"]
lastUpdated: "2025-01-07"
---

import { MatrixTransformation } from '@/components/visualizations/MatrixTransformation'
import { SVDVisualization } from '@/components/visualizations/SVDVisualization'

export const metadata = {
  title: frontmatter.title,
  description: frontmatter.description,
  keywords: frontmatter.keywords,
}

# Advanced Matrix Theory

Building on basic linear algebra, this chapter explores advanced matrix operations and decompositions that are fundamental to machine learning algorithms.

## Matrix Transformations

To begin, let $v$ be a vector (shown as a point) and $A$ be a matrix with columns $a_1$ and $a_2$ (shown as arrows). If we multiply $v$ by $A$, then $A$ sends $v$ to a new vector $Av$.

<MatrixTransformation 
  initialMatrix={[1.0, 0.5, 0.5, 1.0]}
  initialVector={[2.0, 3.0]}
  showEigenAnalysis={true}
/>

If you can draw a line through the three points $(0, 0)$, $v$ and $Av$, then $Av$ is just $v$ multiplied by a number $\lambda$; that is, $Av = \lambda v$. In this case, we call $\lambda$ an **eigenvalue** and $v$ an **eigenvector**. For example, here $(1, 2)$ is an eigenvector and $5$ an eigenvalue.

$$Av = \begin{pmatrix} 1 & 2 \\ 8 & 1 \end{pmatrix} \cdot \begin{pmatrix} 1 \\ 2 \end{pmatrix} = 5 \begin{pmatrix} 1 \\ 2 \end{pmatrix} = \lambda v.$$

## Matrix Decomposition

Matrix decomposition is the process of breaking down a matrix into simpler, more manageable components. These decompositions reveal fundamental properties of linear transformations and enable efficient computation.

### Singular Value Decomposition (SVD)

The Singular Value Decomposition is one of the most important matrix factorizations in machine learning. For any matrix $A \in \mathbb{R}^{m \times n}$, SVD decomposes it as:

$$A = U\Sigma V^T$$

Where:
- $U \in \mathbb{R}^{m \times m}$ is an orthogonal matrix containing left singular vectors
- $\Sigma \in \mathbb{R}^{m \times n}$ is a diagonal matrix of singular values $\sigma_1 \geq \sigma_2 \geq \cdots \geq \sigma_r \geq 0$
- $V \in \mathbb{R}^{n \times n}$ is an orthogonal matrix containing right singular vectors

The singular values in $\Sigma$ are the square roots of the eigenvalues of $A^TA$:

$$\sigma_i = \sqrt{\lambda_i(A^TA)}$$

SVD reveals the intrinsic dimensionality of data and forms the mathematical foundation of Principal Component Analysis (PCA).

<SVDVisualization />

### Reduced SVD

For computational efficiency, we often use the reduced (or truncated) SVD:

$$A \approx U_k\Sigma_k V_k^T$$

Where we keep only the $k$ largest singular values, providing the best rank-$k$ approximation to $A$ in the Frobenius norm.

### LU Decomposition

LU decomposition factors a matrix into the product of a lower triangular matrix $L$ and an upper triangular matrix $U$:

$$A = LU$$

Where:
- $L$ has 1's on the diagonal and zeros above
- $U$ has zeros below the diagonal

This decomposition is particularly useful for solving systems of linear equations $A\vec{x} = \vec{b}$ efficiently:

1. First solve $L\vec{y} = \vec{b}$ (forward substitution)
2. Then solve $U\vec{x} = \vec{y}$ (backward substitution)

### QR Decomposition

QR decomposition expresses a matrix as the product of an orthogonal matrix $Q$ and an upper triangular matrix $R$:

$$A = QR$$

Where $Q^TQ = I$ (orthogonal) and $R$ is upper triangular.

This decomposition is stable for solving least squares problems and is used in the Gram-Schmidt orthogonalization process.

## Eigendecomposition

For a square matrix $A \in \mathbb{R}^{n \times n}$ with $n$ linearly independent eigenvectors, we can write:

$$A = PDP^{-1}$$

Where:
- $P$ contains the eigenvectors as columns
- $D$ is diagonal with eigenvalues $\lambda_1, \lambda_2, \ldots, \lambda_n$

For symmetric matrices, this becomes the spectral decomposition:

$$A = Q\Lambda Q^T$$

Where $Q$ is orthogonal and $\Lambda$ is diagonal with eigenvalues.

## Applications in Machine Learning

Matrix decompositions have direct applications in many machine learning techniques.

### Principal Component Analysis (PCA)

PCA uses eigendecomposition or SVD to find the principal components of data. For a centered data matrix $X \in \mathbb{R}^{m \times n}$ (m samples, n features), the covariance matrix is:

$$C = \frac{1}{m-1}X^TX$$

The eigenvectors of $C$ are the principal components, pointing in directions of maximum variance. The eigenvalues indicate the amount of variance explained by each component.

Using SVD on the data matrix directly:
$$X = U\Sigma V^T$$

The principal components are the columns of $V$, and the projected data is $X_{\text{proj}} = XV_k$ for the first $k$ components.

### Linear Regression via Normal Equations

Linear regression seeks to find parameters $\vec{\theta}$ that minimize the squared error. The normal equation solution uses matrix operations:

$$\vec{\theta} = (X^TX)^{-1}X^T\vec{y}$$

Where $X$ is the feature matrix and $\vec{y}$ is the target vector. This can be solved efficiently using QR decomposition or SVD.

### Matrix Factorization for Dimensionality Reduction

Low-rank matrix approximations reduce dimensionality while preserving important structure:

$$X \approx UV^T$$

Where $U \in \mathbb{R}^{m \times k}$ and $V \in \mathbb{R}^{n \times k}$ with $k \ll \min(m,n)$.

## Computational Considerations

### Condition Numbers

The condition number of a matrix $A$ is:

$$\kappa(A) = \frac{\sigma_{\max}}{\sigma_{\min}}$$

Where $\sigma_{\max}$ and $\sigma_{\min}$ are the largest and smallest singular values. Large condition numbers indicate numerical instability.

### Rank and Nullspace

The rank of matrix $A$ is the number of non-zero singular values. The nullspace (kernel) contains all vectors $\vec{x}$ such that $A\vec{x} = \vec{0}$.

For data analysis:
- **Full rank**: All features are linearly independent
- **Rank deficient**: Some features can be expressed as combinations of others

These concepts are essential for understanding feature selection, regularization, and the geometry of machine learning algorithms.
</file>

<file path="next.config.mjs">
import createMDX from '@next/mdx'
import remarkGfm from 'remark-gfm'
import remarkFrontmatter from 'remark-frontmatter'
import remarkMdxFrontmatter from 'remark-mdx-frontmatter'
import remarkMath from 'remark-math'
import rehypeKatex from 'rehype-katex'
import rehypeSlug from 'rehype-slug'
import rehypeAutolinkHeadings from 'rehype-autolink-headings'

/** @type {import('next').NextConfig} */
const nextConfig = {
  output: 'export',
  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],
  images: {
    unoptimized: true
  },
  reactStrictMode: true,
  swcMinify: true,
  trailingSlash: false,
  poweredByHeader: false
}

const withMDX = createMDX({
  options: {
    remarkPlugins: [
      remarkGfm,
      remarkFrontmatter,
      [remarkMdxFrontmatter, { name: 'frontmatter' }],
      // Add remark-math to process LaTeX syntax
      remarkMath,
    ],
    rehypePlugins: [
      // Add rehype-katex to render LaTeX with KaTeX
      [rehypeKatex, {
        // KaTeX options
        strict: false, // Allow unknown commands
        trust: false, // Don't trust HTML in math
        macros: {
          // Common mathematical macros
          '\\R': '\\mathbb{R}',
          '\\N': '\\mathbb{N}',
          '\\Z': '\\mathbb{Z}',
          '\\Q': '\\mathbb{Q}',
          '\\C': '\\mathbb{C}',
          '\\vec': '\\mathbf{#1}',
          '\\norm': '\\left\\|#1\\right\\|',
          '\\abs': '\\left|#1\\right|',
          '\\argmax': '\\operatorname{argmax}',
          '\\argmin': '\\operatorname{argmin}',
          '\\trace': '\\operatorname{tr}',
          '\\rank': '\\operatorname{rank}',
          '\\diag': '\\operatorname{diag}',
          '\\det': '\\operatorname{det}',
        }
      }],
      rehypeSlug,
      [rehypeAutolinkHeadings, {
        behavior: 'wrap',
        properties: {
          className: ['anchor-link']
        }
      }],
    ],
  },
})

export default withMDX(nextConfig)
</file>

<file path="README.md">
# Interactive ML Mathematics Web Book

An interactive web book focused on mathematics for machine learning, featuring dynamic visualizations and engaging educational content.

## 🚀 Getting Started

### Prerequisites
- Node.js 18+ 
- npm, yarn, or pnpm

### Installation

1. Clone the repository and install dependencies:
```bash
npm install
# or
yarn install
# or
pnpm install
```

2. Run the development server:
```bash
npm run dev
# or
yarn dev
# or
pnpm dev
```

3. Open [http://localhost:3000](http://localhost:3000) in your browser.

### Build for Production

```bash
npm run build
# or
yarn build
# or
pnpm build
```

This creates an optimized static export in the `out/` directory.

## 📁 Project Structure

```
ml-math-book/
├── app/                 # Next.js App Router pages
│   ├── globals.css     # Global styles and CSS variables
│   ├── layout.tsx      # Root layout component
│   ├── page.tsx        # Home page
│   └── not-found.tsx   # 404 page
├── components/         # Reusable React components
│   └── ui/            # UI component library
├── lib/               # Utility functions and helpers
├── public/            # Static assets
├── styles/            # Additional stylesheets
└── types/             # TypeScript type definitions
```

## 🛠 Technology Stack

- **Framework**: Next.js 14+ with App Router
- **Language**: TypeScript with strict mode
- **Styling**: Tailwind CSS with custom theme
- **Deployment**: Static export ready

## 🎨 Theme System

The project uses CSS custom properties for theme variables:
- Light/dark mode support
- Optimized for mathematical content
- Clean black and white design aesthetic

## 📝 Development Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run start` - Start production server
- `npm run lint` - Run ESLint
- `npm run type-check` - Run TypeScript compiler check

## 🎯 Next Steps

This is the foundation setup. The next phase will add:
- Theme toggle system
- MDX integration for content
- Mathematical visualization components
- Interactive exercises
- Chapter navigation system

## 📚 Features (Planned)

- Interactive 3D mathematical visualizations
- Real-time equation rendering with MathJax
- Responsive design optimized for reading
- Progress tracking and exercises
- Smooth scrolling navigation

## 🤝 Contributing

This project serves as both an educational resource and a learning project for modern web development techniques.

## 📄 License

This project is for educational purposes.
</file>

<file path="app/layout.tsx">
import type { Metadata } from 'next'
import { ClientLayout } from '@/components/layout/ClientLayout'
import './globals.css'

export const metadata: Metadata = {
  title: 'Interactive ML Mathematics',
  description: 'An interactive web book for mathematics in machine learning',
  keywords: ['mathematics', 'machine learning', 'linear algebra', 'calculus', 'statistics'],
  authors: [{ name: 'Your Name' }],
  robots: 'index, follow',
  openGraph: {
    title: 'Interactive ML Mathematics',
    description: 'An interactive web book for mathematics in machine learning',
    type: 'website',
    locale: 'en_US'
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Interactive ML Mathematics',
    description: 'An interactive web book for mathematics in machine learning'
  }
}

export const viewport = {
  width: 'device-width',
  initialScale: 1
}

interface RootLayoutProps {
  children: React.ReactNode
}

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        {/* KaTeX CSS - load before any math content */}
        <link
          rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css"
          integrity="sha384-n8MVd4RsNIU0tAv4ct0nTaAbDJwPJzDEaqSD1odI+WdtXRGWt2kTvGFasHpSy3SV"
          crossOrigin="anonymous"
        />
      </head>
      <body className="min-h-screen antialiased">
        <ClientLayout>
          {children}
        </ClientLayout>
      </body>
    </html>
  )
}
</file>

<file path="app/page.tsx">
'use client'

import { HomePageContent } from '@/components/content/HomePageContent'
import { getPublishedChapters } from '@/lib/data/chapters'
import { useState, useEffect } from 'react'

export default function HomePage() {
  const [mounted, setMounted] = useState(false)
  
  useEffect(() => {
    setMounted(true)
  }, [])
  
  if (!mounted) {
    return <div className="min-h-screen bg-background" />
  }
  
  const chapters = getPublishedChapters()
  
  return <HomePageContent chapters={chapters} />
}
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
    './content/**/*.{js,ts,jsx,tsx,mdx}',
    './mdx-components.tsx',
  ],
  darkMode: 'class',
  theme: {
    extend: {
      // Typography optimized for mathematical content
      fontFamily: {
        sans: [
          'system-ui',
          '-apple-system',
          'BlinkMacSystemFont',
          'Segoe UI',
          'Roboto',
          'Oxygen',
          'Ubuntu',
          'Cantarell',
          'sans-serif'
        ],
        mono: [
          'SF Mono',
          'Monaco',
          'Inconsolata',
          'Roboto Mono',
          'monospace'
        ]
      },
      
      // Custom colors using CSS custom properties with opacity support
      colors: {
        // Base colors using CSS custom properties
        background: 'rgb(var(--background) / <alpha-value>)',
        foreground: 'rgb(var(--foreground) / <alpha-value>)',
        muted: {
          DEFAULT: 'rgb(var(--muted) / <alpha-value>)',
          foreground: 'rgb(var(--muted-foreground) / <alpha-value>)',
        },
        border: 'rgb(var(--border) / <alpha-value>)',
        accent: {
          DEFAULT: 'rgb(var(--accent) / <alpha-value>)',
          foreground: 'rgb(var(--accent-foreground) / <alpha-value>)',
        },
        
        // Override default colors to black/white only
        white: '#ffffff',
        black: '#000000',
        transparent: 'transparent',
        current: 'currentColor',
      },
      
      // Improved spacing for mathematical content
      spacing: {
        '18': '4.5rem',
        '88': '22rem'
      },
      
      // Animation utilities for smooth interactions
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-in': 'slideIn 0.3s ease-out'
      },
      
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' }
        },
        slideIn: {
          '0%': { transform: 'translateY(-10px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' }
        }
      },
      
      // Typography enhancements
      typography: {
        DEFAULT: {
          css: {
            maxWidth: 'none',
            lineHeight: '1.7',
            fontSize: '1.1rem'
          }
        }
      }
    }
  },
  plugins: []
}

export default config
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Light theme variables - using RGB values for opacity support */
  --background: 255 255 255;
  --foreground: 0 0 0;
  --muted: 248 248 248;
  --muted-foreground: 102 102 102;
  --border: 225 225 225;
  --accent: 240 240 240;
  --accent-foreground: 0 0 0;
}

.dark {
  /* Dark theme variables - using RGB values for opacity support */
  --background: 0 0 0;
  --foreground: 255 255 255;
  --muted: 10 10 10;
  --muted-foreground: 161 161 161;
  --border: 38 38 38;
  --accent: 26 26 26;
  --accent-foreground: 255 255 255;
}

/* Base styles for mathematical content */
@layer base {
  * {
    @apply border-border;
  }
  
  html {
    scroll-behavior: smooth;
    font-size: 16px; /* Base font size for rem calculations */
  }
  
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    transition: none; /* Disable theme transition animations */
    line-height: 1.6; /* Improved default line height */
  }
  
  /* Typography improvements for readability */
  h1, h2, h3, h4, h5, h6 {
    @apply font-medium text-foreground;
    line-height: 1.2;
    letter-spacing: -0.025em;
    text-wrap: balance; /* Better text wrapping for headings */
  }
  
  h1 {
    @apply text-3xl sm:text-4xl lg:text-5xl font-bold tracking-tight mb-6;
    line-height: 1.1;
  }
  
  h2 {
    @apply text-2xl sm:text-3xl lg:text-4xl font-semibold tracking-tight mb-4 mt-12 first:mt-0;
    line-height: 1.2;
  }
  
  h3 {
    @apply text-xl sm:text-2xl lg:text-3xl font-semibold mb-3 mt-8 first:mt-0;
    line-height: 1.3;
  }
  
  h4 {
    @apply text-lg sm:text-xl font-semibold mb-2 mt-6 first:mt-0;
    line-height: 1.4;
  }
  
  h5 {
    @apply text-base sm:text-lg font-medium mb-2 mt-4 first:mt-0;
    line-height: 1.5;
  }
  
  h6 {
    @apply text-sm sm:text-base font-medium mb-1 mt-4 first:mt-0;
    line-height: 1.5;
  }
  
  p {
    @apply text-foreground mb-4;
    line-height: 1.7;
    font-size: 1rem;
    max-width: none;
  }
  
  /* Mathematical content styling */
  .math-content {
    @apply leading-relaxed text-foreground;
  }
  
  .math-display {
    @apply my-6 text-center overflow-x-auto;
  }
  
  .math-inline {
    @apply font-mono bg-muted px-1 py-0.5 rounded text-sm;
  }
  
  /* Lists */
  ul, ol {
    @apply mb-4 pl-6;
  }
  
  li {
    @apply mb-1;
    line-height: 1.6;
  }
  
  /* Links */
  a {
    @apply text-foreground underline underline-offset-4 decoration-muted-foreground hover:decoration-foreground transition-colors;
  }
  
  /* Code styling */
  code {
    @apply font-mono text-sm bg-muted text-foreground px-1 py-0.5 rounded;
    font-size: 0.875em;
  }
  
  pre {
    @apply font-mono text-sm overflow-x-auto bg-muted text-foreground p-4 rounded-lg border border-border my-4;
    font-size: 0.875rem;
  }
  
  pre code {
    @apply bg-transparent p-0;
  }
  
  /* Blockquotes */
  blockquote {
    @apply border-l-4 border-border pl-4 italic text-muted-foreground my-4;
  }
  
  /* Tables */
  table {
    @apply w-full border-collapse border border-border my-4;
  }
  
  th, td {
    @apply border border-border px-4 py-2 text-left;
  }
  
  th {
    @apply bg-muted font-semibold;
  }
  
  /* Selection styling */
  ::selection {
    @apply bg-foreground text-background;
  }
  
  /* Focus ring styling */
  :focus-visible {
    @apply outline-none ring-2 ring-foreground ring-offset-2 ring-offset-background;
  }
  
  /* Responsive images */
  img {
    @apply max-w-full h-auto;
  }
  
  /* Horizontal rule */
  hr {
    @apply border-0 border-t border-border my-8;
  }
}

/* MDX-specific styles */
@layer components {
  .mdx-content {
    @apply text-foreground leading-relaxed;
  }
  
  .mdx-content h1,
  .mdx-content h2,
  .mdx-content h3,
  .mdx-content h4,
  .mdx-content h5,
  .mdx-content h6 {
    @apply scroll-mt-16; /* Account for fixed header when jumping to anchors */
  }
  
  /* Anchor links for headings */
  .anchor-link {
    @apply no-underline;
  }
  
  .anchor-link:hover {
    @apply underline;
  }
  
  /* Enhanced code blocks for mathematical content */
  .mdx-content pre {
    @apply relative;
    font-variant-ligatures: none; /* Disable ligatures in code blocks */
  }
  
  .mdx-content pre:hover {
    @apply bg-accent transition-colors duration-200;
  }
  
  /* Mathematical notation improvements */
  .mdx-content .math-block {
    @apply font-mono text-center bg-muted border border-border rounded-lg p-4 my-6 overflow-x-auto;
    font-variant-numeric: tabular-nums;
  }
  
  .mdx-content .math-inline {
    @apply font-mono bg-muted px-1 py-0.5 rounded text-sm;
    font-variant-numeric: tabular-nums;
  }
  
  /* Improved list styling */
  .mdx-content ul {
    @apply list-disc pl-6 mb-4 space-y-1;
  }
  
  .mdx-content ol {
    @apply list-decimal pl-6 mb-4 space-y-1;
  }
  
  .mdx-content li {
    @apply leading-relaxed;
  }
  
  /* Enhanced blockquotes */
  .mdx-content blockquote {
    @apply border-l-4 border-border pl-6 py-2 my-6 italic text-muted-foreground rounded-r-lg;
    background-color: rgb(var(--muted) / 0.3);
  }
  
  .mdx-content blockquote p {
    @apply mb-0;
  }
  
  /* Table improvements */
  .mdx-content table {
    @apply w-full border-collapse my-6 text-sm;
  }
  
  .mdx-content th {
    @apply bg-muted font-semibold text-left p-3 border border-border;
  }
  
  .mdx-content td {
    @apply p-3 border border-border;
  }
  
  .mdx-content tbody tr:nth-child(even) {
    background-color: rgb(var(--muted) / 0.3);
  }
  
  /* Image styling */
  .mdx-content img {
    @apply rounded-lg border border-border my-6 mx-auto;
  }
  
  /* Link styling */
  .mdx-content a {
    @apply text-foreground underline underline-offset-4 decoration-muted-foreground hover:decoration-foreground transition-colors;
  }
  
  .mdx-content a[href^="http"] {
    @apply after:content-['↗'] after:text-xs after:ml-1 after:text-muted-foreground;
  }
}

/* Utility classes */
@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
  
  .fade-in {
    animation: fadeIn 0.5s ease-in-out;
  }
  
  .slide-in {
    animation: slideIn 0.3s ease-out;
  }
  
  /* Mathematical content utilities */
  .math-notation {
    font-variant-numeric: tabular-nums;
    font-feature-settings: "tnum" 1;
  }
  
  .code-block-container {
    @apply relative group;
  }
  
  .copy-button {
    @apply absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity;
  }
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    transform: translateY(-10px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

/* Print styles for mathematical content */
@media print {
  .mdx-content {
    @apply text-black bg-white;
  }
  
  .mdx-content .math-block,
  .mdx-content .math-inline {
    @apply bg-transparent border border-gray-300;
  }
  
  .mdx-content a {
    @apply text-black no-underline;
  }
  
  .mdx-content a[href]:after {
    content: " (" attr(href) ")";
    @apply text-xs text-gray-600;
  }
}

/* Add to app/globals.css - KaTeX styling */

/* Import KaTeX CSS */
@import 'katex/dist/katex.min.css';

/* KaTeX custom styling */
@layer components {
  /* Light theme KaTeX */
  .katex {
    font-size: 1.1em !important;
    color: rgb(var(--foreground)) !important;
  }
  
  .katex-display {
    margin: 1.5em 0 !important;
    text-align: center !important;
    overflow-x: auto !important;
    overflow-y: hidden !important;
  }
  
  .katex-display > .katex {
    display: inline-block !important;
    white-space: nowrap !important;
    max-width: 100% !important;
  }
  
  /* Dark theme adjustments */
  .dark .katex {
    color: rgb(var(--foreground)) !important;
  }
  
  .dark .katex .base {
    color: rgb(var(--foreground)) !important;
  }
  
  /* Responsive math */
  @media (max-width: 640px) {
    .katex {
      font-size: 1em !important;
    }
    
    .katex-display {
      margin: 1em 0 !important;
      padding: 0 1em !important;
    }
  }
  
  /* Math in content flow */
  .mdx-content .katex-display {
    background: rgb(var(--muted) / 0.3);
    border-radius: 8px;
    padding: 1rem;
    border: 1px solid rgb(var(--border));
  }
  
  /* Inline math adjustments */
  .mdx-content .katex {
    background: rgb(var(--muted) / 0.5);
    padding: 0.125rem 0.25rem;
    border-radius: 4px;
    margin: 0 0.125rem;
  }
}

/* Interactive visualization integration */
@layer utilities {
  .math-viz-container {
    @apply my-8 p-6 bg-background border border-border rounded-lg;
    @apply grid grid-cols-1 lg:grid-cols-2 gap-6;
  }
  
  .math-equations {
    @apply space-y-4;
  }
  
  .interactive-plot {
    @apply min-h-96 bg-muted rounded-lg;
  }
  
  .math-controls {
    @apply flex flex-wrap gap-4 p-4 bg-muted rounded-lg;
  }
  
  .math-slider {
    @apply flex flex-col space-y-2;
  }
  
  .math-slider label {
    @apply text-sm font-medium text-muted-foreground;
  }
  
  .math-slider input[type="range"] {
    @apply w-full h-2 bg-border rounded-lg appearance-none cursor-pointer;
  }
  
  .math-slider input[type="range"]::-webkit-slider-thumb {
    @apply appearance-none w-4 h-4 bg-foreground rounded-full cursor-pointer;
  }
}
</file>

<file path="package.json">
{
  "name": "ml-math-book",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "@mdx-js/loader": "^3.1.0",
    "@mdx-js/react": "^3.1.0",
    "@next/mdx": "^14.2.31",
    "@types/mdx": "^2.0.13",
    "clsx": "^2.1.1",
    "framer-motion": "^10.16.0",
    "katex": "^0.16.9",
    "next": "^14.2.0",
    "react": "^18.3.0",
    "react-dom": "^18.3.0",
    "react-intersection-observer": "^9.5.0",
    "rehype-autolink-headings": "^7.1.0",
    "rehype-katex": "^7.0.1",
    "rehype-slug": "^6.0.0",
    "remark-frontmatter": "^5.0.0",
    "remark-gfm": "^4.0.1",
    "remark-math": "^6.0.0",
    "remark-mdx-frontmatter": "^5.2.0",
    "three": "^0.160.0"
  },
  "devDependencies": {
    "@types/katex": "^0.16.7",
    "@types/node": "^20.14.0",
    "@types/react": "^18.3.0",
    "@types/react-dom": "^18.3.0",
    "@types/three": "^0.160.0",
    "autoprefixer": "^10.4.19",
    "eslint": "^8.57.0",
    "eslint-config-next": "^14.2.0",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.4",
    "typescript": "^5.4.0"
  }
}
</file>

</files>
